index,question,data_services,advice,pipeline,output,output_json,example_query,example_pipeline
0,Which employee has the highest salary? Please give his or her full name.,,,,,,,
1,How many emplyees have a good job performance?,,,,,,,
2,"Please list the social security numbers of the male employees with a salary of over $70,000 a year.",,,,,,,
3,What is the required education for the position of regional manager?,,,,,,,
4,"Which position has a lower minimum salary, Account Representative or Trainee?",,,,,,,
5,In which city's office does Sandy Adams work at?,,,,,,,
6,"Among the employees working at the office in New York, how many of them have a good job performance?",,,,,,,
7,What is the office phone number of the location at which Sandy Adams works?,,,,,,,
8,How many male employees work at the address 450 Peachtree Rd?,,,,,,,
9,How many employees work as an Account Representative?,,,,,,,
10,How much higher is James Johnson's salary from the minimum salary of his title?,,,,,,,
11,"Among the employees who are Trainees, how many of them work in New York?",,,,,,,
12,Please list the full names of the employees who are working as a Trainee.,,,,,,,
13,"Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?",,,,,,,
14,Please list the zip codes of the offices where all the male employees with a good job performance work at.,,,,,,,
15,Please list the social security numbers of all the employees who work in California.,,,,,,,
16,"Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year?",,,,,,,
17,What is the average salary of the employees who work as a Trainee?,,,,,,,
18,By what percentage is the average salary of Trainees higher than the minimum salary of this postion?,,,,,,,
19,Give the number of female employees.,,,,,,,
20,State the name of the city where Jose Rodriguez works.,,,,,,,
21,In which state does Emily Wood work?,,,,,,,
22,What is the education required for David Whitehead to reach his current position?,,,,,,,
23,"How many employees are there in the ""Miami"" office?",,,,,,,
24,"Who is the highest paid employee in ""Boston""? Give the full name.",,,,,,,
25,Who is the employee in “New York City” with a good performance? Give the social security number of the employee.,,,,,,,
26,"How many ""account representatives"" are there in Chicago with a good performance?",,,,,,,
27,What is Kenneth Charles's position title?,,,,,,,
28,Give the full address of the office of the highest paid manager.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","{'general_suggestions': ""To solve the query, we need to first retrieve the employee data to find the employee with the highest salary. Then, we need to extract the employee's name, position title, and location city. This requires joining data from the employee, position, and location datasets. We will use the 'GetDataFromEmployee' to get the employee details, 'GetDataFromPosition' to get the position title, and 'GetDataFromLocation' to get the location city. The salary needs to be converted from string to a numeric format to perform the necessary calculations."", 'tools': [{'tool_name': 'GetDataFromEmployee', 'motivation': 'To retrieve employee details including salary, which is needed to find the employee with the highest salary.', 'suggestions': ""Use this tool to get all employee data. Convert the 'salary' field from string to a numeric format by removing 'US$' and commas. Find the employee with the maximum salary and extract their 'ssn', 'firstname', 'lastname', 'positionID', and 'locationID'.""}, {'tool_name': 'GetDataFromPosition', 'motivation': 'To retrieve the position title of the employee with the highest salary.', 'suggestions': ""Use the 'positionID' obtained from the employee data to query this tool and get the 'positiontitle'.""}, {'tool_name': 'GetDataFromLocation', 'motivation': 'To retrieve the location city of the employee with the highest salary.', 'suggestions': ""Use the 'locationID' obtained from the employee data to query this tool and get the 'locationcity'.""}]}","def pipeline_function():
    # Initialize the data service classes
    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    # Open connections
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    # Retrieve all positions with title 'Manager'
    position_df = positions.call(positiontitle=(""Manager"", ""EQUAL""))
    
    # Check if position_df is not empty
    if position_df.empty:
        return []
    
    # Get the position IDs for managers
    manager_position_ids = position_df['positionID'].tolist()
    
    # Retrieve all employees with positionID in manager_position_ids
    employee_df = employees.call(positionID=(manager_position_ids, ""EQUAL""))
    
    # Check if employee_df is not empty
    if employee_df.empty:
        return []
    
    # Convert salary to numeric for comparison
    try:
        employee_df['salary_numeric'] = employee_df['salary'].apply(lambda x: float(x.replace('US$', '').replace(',', '')))
    except ValueError:
        return []
    
    # Find the highest paid manager
    highest_paid_manager = employee_df.loc[employee_df['salary_numeric'].idxmax()]
    
    # Retrieve the location of the highest paid manager
    location_df = locations.call(locationID=(highest_paid_manager['locationID'], ""EQUAL""))
    
    # Check if location_df is not empty
    if location_df.empty:
        return []
    
    # Get the full address of the office
    full_address = location_df[['address', 'locationcity', 'state', 'zipcode']].iloc[0].to_dict()
    
    # Prepare the result
    result = [{
        'full_address': full_address
    }]
    
    return result",The pipeline did not run successfully,[{'positiontitle': 'Account Representative'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
29,What is the max salary for 'Tracy Coulter' if he/she stays on his/her position?,,,,,,,
30,"If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position?",,,,,,,
31,"How many employees whose performance is poor have a salary of over $50,000 per year?",,,,,,,
32,Who is the employee with the highest salary? Specify his/her full name.,,,,,,,
33,"How many positions have a maximum salary of no more than US$1000,000?",,,,,,,
34,How much is the salary of the first ever employee that was hired?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","{'general_suggestions': ""To solve the query, we need to first retrieve the employee data to find the employee with the highest salary. Then, we need to extract the employee's name, position title, and location city. This requires joining data from the employee, position, and location datasets. We will use the 'GetDataFromEmployee' to get the employee details, 'GetDataFromPosition' to get the position title, and 'GetDataFromLocation' to get the location city. The salary needs to be converted from string to a numeric format to perform the necessary calculations."", 'tools': [{'tool_name': 'GetDataFromEmployee', 'motivation': 'To retrieve employee details including salary, which is needed to find the employee with the highest salary.', 'suggestions': ""Use this tool to get all employee data. Convert the 'salary' field from string to a numeric format by removing 'US$' and commas. Find the employee with the maximum salary and extract their 'ssn', 'firstname', 'lastname', 'positionID', and 'locationID'.""}, {'tool_name': 'GetDataFromPosition', 'motivation': 'To retrieve the position title of the employee with the highest salary.', 'suggestions': ""Use the 'positionID' obtained from the employee data to query this tool and get the 'positiontitle'.""}, {'tool_name': 'GetDataFromLocation', 'motivation': 'To retrieve the location city of the employee with the highest salary.', 'suggestions': ""Use the 'locationID' obtained from the employee data to query this tool and get the 'locationcity'.""}]}","def pipeline_function():
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    # Retrieve all employee data
    employee_df = employees.call()
    
    # Ensure hiredate is in the correct datetime format
    try:
        employee_df['hiredate'] = pd.to_datetime(employee_df['hiredate'], format='%d-%m-%y')
    except Exception as e:
        raise ValueError(""Error in converting hiredate to datetime format: "" + str(e))
    
    # Find the first ever hired employee
    try:
        first_hired_employee = employee_df.loc[employee_df['hiredate'].idxmin()]
    except Exception as e:
        raise ValueError(""Error in finding the first hired employee: "" + str(e))
    
    # Extract the salary, clean it, and convert to float
    try:
        salary_str = first_hired_employee['salary']
        salary_str = salary_str.replace(""US$"", """").replace("","", """")
        salary = float(salary_str)
    except Exception as e:
        raise ValueError(""Error in processing salary: "" + str(e))
    
    results.append({
        'first_hired_employee_salary': salary
    })
    
    return results",The pipeline did not run successfully,[{'num_positions': 0}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
35,How much is the minimum salary given to the position with the most complex work?,,,,,,,
36,What is the full office location address where most of the employees work at?,,,,,,,
37,What is the average salary of all employees with a 2 year degree position?,,,,,,,
38,How many male Regional Managers are there?,,,,,,,
39,Which position has the highest amount of poor performing employees?,,,,,,,
40,Which position has the highest number of female employees with a 2 year degree?,,,,,,,
41,How many Account Representatives are there in Illinois with satisfying performance?,,,,,,,
42,What is the average salary of the worst performing managers?,,,,,,,
43,In which state can you find the highest amount of good performing Account Representatives?,,,,,,,
44,Mention the employee's full name and performance status who got the lowest in salary per year.,,,,,,,
45,List the location cities in the Western states.,,,,,,,
46,Which city and address has zip code of above 90000?,,,,,,,
47,Which positions are suitable with 4 years degree education?,,,,,,,
48,"What is the maximum salary of position ""Trainer""?",,,,,,,
49,List the full name and social security number of the account representative with average performance.,,,,,,,
50,When was Emily Wood hired? Mention her position and salary.,,,,,,,
51,What are the maximum and minimum salary range and position title of Bill Marlin?,,,,,,,
52,"List the full names, gender and positions who's location is in New York city.",,,,,,,
53,"Mention the full name, hired date and performance status of the employee whose location is in Utah state.",,,,,,,
54,"Among the employees with poor performance, provide the managers' full names, location city, address and its zip code.",,,,,,,
55,What is the education required to be account representative? Mention account representative full name and salary who got poor in performance status.,,,,,,,
56,"Write down the full name, performance status and located city of the employee who's social security number is ""767-74-7373"".",,,,,,,
57,"Describe the employees' full name, positions, located city and office phone number within Colorado state.",,,,,,,
58,"Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city.",,,,,,,
