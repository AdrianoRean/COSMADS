index,question,data_services,pipeline,output,output_json,example_query,example_pipeline
0,Which employee has the highest salary? Please give his or her full name.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee

def pipeline_function():
    results = []

    employees = GetDataFromEmployee()
    employees.open_connection()
    
    employee_df = employees.call()
    
    # Remove 'US$' and ',' from salary and convert to float for comparison
    employee_df['salary'] = employee_df['salary'].str.replace('US$', '').str.replace(',', '').astype(float)
    
    # Find the employee with the highest salary
    highest_salary_employee = employee_df.loc[employee_df['salary'].idxmax()]
    
    # Prepare the result
    results.append({
        'fullname': f""{highest_salary_employee['firstname']} {highest_salary_employee['lastname']}""
    })
    
    return results","+----+-----------------+
|    | fullname        |
|----+-----------------|
|  0 | David Whitehead |
+----+-----------------+",[{'fullname': 'David Whitehead'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
1,How many emplyees have a good job performance?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    good_performance_count = employee_df.shape[0]
    
    results.append({
        'good_performance_count': good_performance_count
    })
    
    return results","+----+--------------------------+
|    |   good_performance_count |
|----+--------------------------|
|  0 |                       11 |
+----+--------------------------+",[{'good_performance_count': 11}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
2,"Please list the social security numbers of the male employees with a salary of over $70,000 a year.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee

    # Define the query parameters
    gender = (""M"", ""EQUAL"")
    salary = (""US$70,000"", ""GREATER"")

    # Initialize the results list
    results = []

    # Create an instance of the GetDataFromEmployee class
    employees = GetDataFromEmployee()

    # Open the connection to the data service
    employees.open_connection()

    # Call the data service with the specified parameters
    employee_df = employees.call(gender=gender, salary=salary)

    # Iterate over the resulting dataframe and extract the SSNs
    for _, row in employee_df.iterrows():
        results.append({'ssn': row['ssn']})

    return results","+----+-------------+
|    | ssn         |
|----+-------------|
|  0 | 444-45-4444 |
+----+-------------+",[{'ssn': '444-45-4444'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
3,What is the required education for the position of regional manager?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    positiontitle = (""Regional Manager"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    if not position_df.empty:
        education_required = position_df['educationrequired'].iloc[0]
        results.append({
            'educationrequired': education_required
        })
    
    return results","+----+---------------------+
|    | educationrequired   |
|----+---------------------|
|  0 | 6 year degree       |
+----+---------------------+",[{'educationrequired': '6 year degree'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
4,"Which position has a lower minimum salary, Account Representative or Trainee?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from position import GetDataFromPosition

    # Define the position titles to compare
    position_titles = [""Account Representative"", ""Trainee""]

    # Initialize the data service
    positions = GetDataFromPosition()
    positions.open_connection()

    # Initialize a list to store results
    results = []

    # Iterate over the position titles to find their minimum salaries
    for title in position_titles:
        positiontitle = (title, ""EQUAL"")
        position_df = positions.call(positiontitle=positiontitle)

        # Extract and clean the minimum salary
        minsalary = position_df['minsalary'].iloc[0]
        minsalary = minsalary.replace(""US$"", """").replace("","", """")
        minsalary = float(minsalary)

        # Append the result to the list
        results.append({
            'positiontitle': title,
            'minsalary': minsalary
        })

    # Determine which position has the lower minimum salary
    lower_min_salary_position = min(results, key=lambda x: x['minsalary'])

    return [lower_min_salary_position]","+----+-----------------+-------------+
|    | positiontitle   |   minsalary |
|----+-----------------+-------------|
|  0 | Trainee         |       18000 |
+----+-----------------+-------------+","[{'positiontitle': 'Trainee', 'minsalary': 18000.0}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
5,In which city's office does Sandy Adams work at?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation

    firstname = (""Sandy"", ""EQUAL"")
    lastname = (""Adams"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()

    employees.open_connection()
    locations.open_connection()

    employee_df = employees.call(firstname=firstname, lastname=lastname)

    if not employee_df.empty:
        locationID = employee_df['locationID'].iloc[0]
        location_df = locations.call(locationID=(locationID, ""EQUAL""))

        if not location_df.empty:
            locationcity = location_df['locationcity'].iloc[0]
            results.append({
                'locationcity': locationcity
            })

    return results","+----+----------------+
|    | locationcity   |
|----+----------------|
|  0 | Atlanta        |
+----+----------------+",[{'locationcity': 'Atlanta'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
6,"Among the employees working at the office in New York, how many of them have a good job performance?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    # Initialize the results list
    results = []

    # Get the location ID for New York
    location_city = (""New York"", ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationcity=location_city)
    
    # Check if New York location exists
    if not location_df.empty:
        new_york_location_id = location_df.iloc[0]['locationID']
        
        # Get employees with good performance in New York
        location_id = (new_york_location_id, ""EQUAL"")
        performance = (""Good"", ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(locationID=location_id, performance=performance)
        
        # Count the number of employees with good performance
        good_performance_count = employee_df.shape[0]
        
        # Append the result to the results list
        results.append({
            'location': 'New York',
            'good_performance_count': good_performance_count
        })
    
    return results",,[],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
7,What is the office phone number of the location at which Sandy Adams works?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    firstname = (""Sandy"", ""EQUAL"")
    lastname = (""Adams"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    locations.open_connection()
    
    employee_df = employees.call(firstname=firstname, lastname=lastname)
    locationID = employee_df[""locationID""].iloc[0]
    location_df = locations.call(locationID=(locationID, ""EQUAL""))
    office_info = location_df.iloc[0]
    
    office_info = office_info.astype(str)
    results.append({
        'officephone': office_info['officephone']
    })
    
    return results","+----+---------------+
|    | officephone   |
|----+---------------|
|  0 | (404)333-5555 |
+----+---------------+",[{'officephone': '(404)333-5555'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
8,How many male employees work at the address 450 Peachtree Rd?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    locations.open_connection()

    # Get the locationID for the address 450 Peachtree Rd
    address = (""450 Peachtree Rd"", ""EQUAL"")
    location_df = locations.call(address=address)
    if location_df.empty:
        return []

    locationID = location_df['locationID'].iloc[0]

    # Get all male employees at the specified location
    gender = (""M"", ""EQUAL"")
    employee_df = employees.call(locationID=(locationID, ""EQUAL""), gender=gender)

    # Prepare the result
    results = [{'male_employee_count': len(employee_df)}]

    return results","+----+-----------------------+
|    |   male_employee_count |
|----+-----------------------|
|  0 |                     1 |
+----+-----------------------+",[{'male_employee_count': 1}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
9,How many employees work as an Account Representative?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from position import GetDataFromPosition

    # Step 1: Get the positionID for 'Account Representative'
    positiontitle = (""Account Representative"", ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)

    if position_df.empty:
        return [{""count"": 0}]

    account_representative_position_id = position_df.iloc[0]['positionID']

    # Step 2: Get employees with the positionID of 'Account Representative'
    positionID = (account_representative_position_id, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(positionID=positionID)

    # Step 3: Count the number of employees
    employee_count = employee_df.shape[0]

    return [{""count"": employee_count}]","+----+---------+
|    |   count |
|----+---------|
|  0 |      10 |
+----+---------+",[{'count': 10}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
10,How much higher is James Johnson's salary from the minimum salary of his title?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    import pandas as pd

    # Initialize the data service for employees
    employees = GetDataFromEmployee()
    employees.open_connection()

    # Fetch data for James Johnson
    firstname = (""James"", ""EQUAL"")
    lastname = (""Johnson"", ""EQUAL"")
    employee_df = employees.call(firstname=firstname, lastname=lastname)

    # Extract James Johnson's salary and positionID
    james_salary_str = employee_df['salary'].iloc[0]
    positionID = employee_df['positionID'].iloc[0]

    # Convert salary to float
    james_salary = float(james_salary_str.replace(""US$"", """").replace("","", """"))

    # Initialize the data service for positions
    positions = GetDataFromPosition()
    positions.open_connection()

    # Fetch data for the position
    position_df = positions.call(positionID=(positionID, ""EQUAL""))

    # Extract the minimum salary for the position
    min_salary_str = position_df['minsalary'].iloc[0]
    min_salary = float(min_salary_str.replace(""US$"", """").replace("","", """"))

    # Calculate the difference
    salary_difference = james_salary - min_salary

    # Prepare the result
    result = [{
        'firstname': 'James',
        'lastname': 'Johnson',
        'salary_difference': salary_difference
    }]

    return result","+----+-------------+------------+---------------------+
|    | firstname   | lastname   |   salary_difference |
|----+-------------+------------+---------------------|
|  0 | James       | Johnson    |               22500 |
+----+-------------+------------+---------------------+","[{'firstname': 'James', 'lastname': 'Johnson', 'salary_difference': 22500.0}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
11,"Among the employees who are Trainees, how many of them work in New York?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from position import GetDataFromPosition
    from location import GetDataFromLocation

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()

    # Get the positionID for 'Trainee'
    position_df = positions.call(positiontitle=(""Trainee"", ""EQUAL""))
    trainee_position_ids = position_df['positionID'].tolist()

    # Get the locationID for 'New York'
    location_df = locations.call(locationcity=(""New York"", ""EQUAL""))
    new_york_location_ids = location_df['locationID'].tolist()

    # Get employees who are Trainees and work in New York
    employee_df = employees.call(positionID=(trainee_position_ids, ""EQUAL""), locationID=(new_york_location_ids, ""EQUAL""))

    # Count the number of such employees
    num_employees = len(employee_df)

    # Return the result as a list of dictionaries
    return [{""num_employees"": num_employees}]",The pipeline did not run successfully,"[{'firstname': 'James', 'lastname': 'Johnson', 'salary_difference': 22500.0}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
12,Please list the full names of the employees who are working as a Trainee.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    positiontitle = (""Trainee"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    for index, employee in employee_df.iterrows():
        full_name = f""{employee['firstname']} {employee['lastname']}""
        results.append({
            'fullname': full_name
        })
    
    return results","+----+----------------+
|    | fullname       |
|----+----------------|
|  0 | Sandy Adams    |
|  1 | Marietta Brown |
|  2 | William Martin |
+----+----------------+","[{'fullname': 'Sandy Adams'}, {'fullname': 'Marietta Brown'}, {'fullname': 'William Martin'}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
13,"Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee
from position import GetDataFromPosition

def pipeline_function():
    # Define the names of the employees to compare
    employee_names = [(""Rodriguez"", ""Jose""), (""Adams"", ""Sandy"")]

    results = []

    # Initialize the data services
    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()

    # Open connections to the data services
    employees.open_connection()
    positions.open_connection()

    # Retrieve employee data for both employees
    for lastname, firstname in employee_names:
        employee_df = employees.call(lastname=(lastname, ""EQUAL""), firstname=(firstname, ""EQUAL""))
        if not employee_df.empty:
            positionID = employee_df[""positionID""].iloc[0]
            position_df = positions.call(positionID=(positionID, ""EQUAL""))
            if not position_df.empty:
                position_info = position_df.iloc[0]
                position_info = position_info.astype(str)
                results.append({
                    'firstname': firstname,
                    'lastname': lastname,
                    'positionID': position_info['positionID'],
                    'positiontitle': position_info['positiontitle'],
                    'educationrequired': position_info['educationrequired']
                })

    # Compare the education levels required for the positions
    if len(results) == 2:
        if results[0]['educationrequired'] > results[1]['educationrequired']:
            return [results[0]]
        else:
            return [results[1]]

    return results","+----+-------------+------------+--------------+------------------+---------------------+
|    | firstname   | lastname   |   positionID | positiontitle    | educationrequired   |
|----+-------------+------------+--------------+------------------+---------------------|
|  0 | Jose        | Rodriguez  |            4 | Regional Manager | 6 year degree       |
+----+-------------+------------+--------------+------------------+---------------------+","[{'firstname': 'Jose', 'lastname': 'Rodriguez', 'positionID': '4', 'positiontitle': 'Regional Manager', 'educationrequired': '6 year degree'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
14,Please list the zip codes of the offices where all the male employees with a good job performance work at.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    locations.open_connection()

    # Define the filters for male employees with good performance
    gender_filter = (""M"", ""EQUAL"")
    performance_filter = (""good"", ""EQUAL"")

    # Get the employee data with the specified filters
    employee_df = employees.call(gender=gender_filter, performance=performance_filter)

    # Get unique location IDs from the filtered employees
    unique_location_ids = employee_df['locationID'].unique()

    # Prepare the results list
    results = []

    # Iterate over each unique location ID to get the corresponding zip code
    for location_id in unique_location_ids:
        location_df = locations.call(locationID=(location_id, ""EQUAL""))
        zipcode = location_df['zipcode'].iloc[0]
        results.append({'zipcode': zipcode})

    return results",,[],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
15,Please list the social security numbers of all the employees who work in California.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation

    results = []

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    locations.open_connection()

    # Get all locations in California
    location_df = locations.call(state=(""California"", ""EQUAL""))

    # Extract location IDs for California
    california_location_ids = location_df[""locationID""].tolist()

    # Get all employees working in California
    employee_df = employees.call(locationID=(california_location_ids, ""EQUAL""))

    # Extract SSNs of employees
    for _, row in employee_df.iterrows():
        results.append({'ssn': row['ssn']})

    return results",The pipeline did not run successfully,[],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
16,"Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    import pandas as pd
    from employee import GetDataFromEmployee
    from position import GetDataFromPosition

    # Initialize results list
    results = []

    # Get positionID for Trainee
    positiontitle = (""Trainee"", ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)
    
    if position_df.empty:
        return results

    trainee_position_id = position_df['positionID'].iloc[0]

    # Get employees with positionID of Trainee
    positionID = (trainee_position_id, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(positionID=positionID)

    # Filter employees with salary over $20,000
    employee_df['salary'] = employee_df['salary'].str.replace(""US$"", """").str.replace("","", """").astype(float)
    high_salary_employees = employee_df[employee_df['salary'] > 20000]

    # Count the number of employees with salary over $20,000
    count_high_salary_employees = high_salary_employees.shape[0]

    # Append result
    results.append({
        'position': 'Trainee',
        'count_high_salary_employees': count_high_salary_employees
    })

    return results","+----+------------+-------------------------------+
|    | position   |   count_high_salary_employees |
|----+------------+-------------------------------|
|  0 | Trainee    |                             1 |
+----+------------+-------------------------------+","[{'position': 'Trainee', 'count_high_salary_employees': 1}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
17,What is the average salary of the employees who work as a Trainee?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from position import GetDataFromPosition

    # Get positionID for 'Trainee'
    positiontitle = (""Trainee"", ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)
    
    if position_df.empty:
        return []

    trainee_position_id = position_df.iloc[0]['positionID']

    # Get employees with positionID of 'Trainee'
    positionID = (trainee_position_id, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(positionID=positionID)

    if employee_df.empty:
        return []

    # Calculate average salary
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()

    results = [{
        'position': 'Trainee',
        'average salary': str(average_salary)
    }]

    return results","+----+------------+------------------+
|    | position   |   average salary |
|----+------------+------------------|
|  0 | Trainee    |          20333.3 |
+----+------------+------------------+","[{'position': 'Trainee', 'average salary': '20333.333333333332'}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
18,By what percentage is the average salary of Trainees higher than the minimum salary of this postion?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    import pandas as pd

    # Initialize the results list
    results = []

    # Get data from the employee service
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()

    # Filter employees with the position title 'Trainee'
    trainee_employees = employee_df[employee_df['positionID'] == 'Trainee']

    # Convert salary strings to float
    trainee_salaries = trainee_employees['salary'].str.replace(""US$"", """").str.replace("","", """").astype(float)

    # Calculate the average salary of Trainees
    average_trainee_salary = trainee_salaries.mean()

    # Get data from the position service
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call()

    # Get the minimum salary for the 'Trainee' position
    trainee_position = position_df[position_df['positiontitle'] == 'Trainee']
    min_trainee_salary = trainee_position['minsalary'].str.replace(""US$"", """").str.replace("","", """").astype(float).min()

    # Calculate the percentage increase
    percentage_increase = ((average_trainee_salary - min_trainee_salary) / min_trainee_salary) * 100

    # Append the result to the results list
    results.append({
        'average_trainee_salary': average_trainee_salary,
        'min_trainee_salary': min_trainee_salary,
        'percentage_increase': percentage_increase
    })

    return results","+----+--------------------------+----------------------+-----------------------+
|    |   average_trainee_salary |   min_trainee_salary |   percentage_increase |
|----+--------------------------+----------------------+-----------------------|
|  0 |                      nan |                18000 |                   nan |
+----+--------------------------+----------------------+-----------------------+","[{'average_trainee_salary': nan, 'min_trainee_salary': 18000.0, 'percentage_increase': nan}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
19,Give the number of female employees.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee

    # Define the filter for female employees
    gender_filter = (""F"", ""EQUAL"")

    # Initialize the results list
    results = []

    # Create an instance of the GetDataFromEmployee class
    employees = GetDataFromEmployee()

    # Open the connection to the data service
    employees.open_connection()

    # Retrieve the employee data filtered by gender
    employee_df = employees.call(gender=gender_filter)

    # Count the number of female employees
    num_female_employees = employee_df.shape[0]

    # Append the result to the results list
    results.append({
        'number_of_female_employees': num_female_employees
    })

    return results","+----+------------------------------+
|    |   number_of_female_employees |
|----+------------------------------|
|  0 |                           12 |
+----+------------------------------+",[{'number_of_female_employees': 12}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
20,State the name of the city where Jose Rodriguez works.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation

    firstname = (""Jose"", ""EQUAL"")
    lastname = (""Rodriguez"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()

    employees.open_connection()
    locations.open_connection()

    employee_df = employees.call(firstname=firstname, lastname=lastname)

    if not employee_df.empty:
        locationID = employee_df['locationID'].iloc[0]
        location_df = locations.call(locationID=(locationID, ""EQUAL""))

        if not location_df.empty:
            locationcity = location_df['locationcity'].iloc[0]
            results.append({
                'locationcity': locationcity
            })

    return results","+----+----------------+
|    | locationcity   |
|----+----------------|
|  0 | New York City  |
+----+----------------+",[{'locationcity': 'New York City'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
21,In which state does Emily Wood work?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    firstname = (""Emily"", ""EQUAL"")
    lastname = (""Wood"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    locations.open_connection()
    
    employee_df = employees.call(firstname=firstname, lastname=lastname)
    
    if not employee_df.empty:
        locationID = employee_df['locationID'].iloc[0]
        location_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        if not location_df.empty:
            state = location_df['state'].iloc[0]
            results.append({
                'state': state
            })
    
    return results","+----+---------+
|    | state   |
|----+---------|
|  0 | NY      |
+----+---------+",[{'state': 'NY'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
22,What is the education required for David Whitehead to reach his current position?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee
from position import GetDataFromPosition

def pipeline_function():
    firstname = (""David"", ""EQUAL"")
    lastname = (""Whitehead"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(firstname=firstname, lastname=lastname)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)
    results.append({
        'educationrequired': position_info['educationrequired']
    })
    
    return results","+----+---------------------+
|    | educationrequired   |
|----+---------------------|
|  0 | 6 year degree       |
+----+---------------------+",[{'educationrequired': '6 year degree'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
23,"How many employees are there in the ""Miami"" office?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    locationcity = (""Miami"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    locations.open_connection()
    
    location_df = locations.call(locationcity=locationcity)
    if location_df.empty:
        return results
    
    locationID = location_df['locationID'].iloc[0]
    
    employee_df = employees.call(locationID=(locationID, ""EQUAL""))
    
    num_employees = employee_df.shape[0]
    
    results.append({
        'number_of_employees': num_employees
    })
    
    return results","+----+-----------------------+
|    |   number_of_employees |
|----+-----------------------|
|  0 |                     3 |
+----+-----------------------+",[{'number_of_employees': 3}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
24,"Who is the highest paid employee in ""Boston""? Give the full name.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    import pandas as pd

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    locations.open_connection()

    # Get the locationID for Boston
    locationcity = (""Boston"", ""EQUAL"")
    location_df = locations.call(locationcity=locationcity)
    if location_df.empty:
        return []

    boston_location_id = location_df['locationID'].iloc[0]

    # Get employees in Boston
    employee_df = employees.call(locationID=(boston_location_id, ""EQUAL""))

    if employee_df.empty:
        return []

    # Convert salary to numeric for comparison
    employee_df['salary_numeric'] = employee_df['salary'].apply(lambda x: float(x.replace('US$', '').replace(',', '')))

    # Find the highest paid employee
    highest_paid_employee = employee_df.loc[employee_df['salary_numeric'].idxmax()]

    # Prepare the result
    result = [{
        'fullname': f""{highest_paid_employee['firstname']} {highest_paid_employee['lastname']}""
    }]

    return result","+----+-----------------+
|    | fullname        |
|----+-----------------|
|  0 | David Whitehead |
+----+-----------------+",[{'fullname': 'David Whitehead'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
25,Who is the employee in “New York City” with a good performance? Give the social security number of the employee.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    import pandas as pd

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    locations.open_connection()

    # Get the locationID for New York City
    location_df = locations.call(locationcity=(""New York City"", ""EQUAL""))
    if location_df.empty:
        return []  # No location found for New York City

    # Extract the locationID for New York City
    nyc_location_id = location_df[""locationID""].iloc[0]

    # Get employees in New York City with good performance
    employee_df = employees.call(locationID=(nyc_location_id, ""EQUAL""), performance=(""good"", ""EQUAL""))
    if employee_df.empty:
        return []  # No employees found with good performance in New York City

    # Prepare the result
    results = []
    for _, row in employee_df.iterrows():
        results.append({
            'ssn': row['ssn']
        })

    return results",,[],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
26,"How many ""account representatives"" are there in Chicago with a good performance?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation
    from position import GetDataFromPosition

    # Step 1: Get the locationID for Chicago
    locationcity = (""Chicago"", ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationcity=locationcity)
    chicago_location_ids = location_df['locationID'].tolist()

    # Step 2: Get the positionID for ""Account Representative""
    positiontitle = (""Account Representative"", ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)
    account_representative_position_ids = position_df['positionID'].tolist()

    # Step 3: Get employees who are ""Account Representatives"" in Chicago with good performance
    performance = (""good"", ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(performance=performance)

    # Filter employees based on locationID and positionID
    filtered_employees = employee_df[
        (employee_df['locationID'].isin(chicago_location_ids)) &
        (employee_df['positionID'].isin(account_representative_position_ids))
    ]

    # Prepare the result
    results = [{'count': len(filtered_employees)}]

    return results","+----+---------+
|    |   count |
|----+---------|
|  0 |       0 |
+----+---------+",[{'count': 0}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
27,What is Kenneth Charles's position title?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee
from position import GetDataFromPosition

def pipeline_function():
    firstname = (""Kenneth"", ""EQUAL"")
    lastname = (""Charles"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(firstname=firstname, lastname=lastname)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results","+----+--------------+------------------------+---------------------+--------------+--------------+
|    |   positionID | positiontitle          | educationrequired   | minsalary    | maxsalary    |
|----+--------------+------------------------+---------------------+--------------+--------------|
|  0 |            1 | Account Representative | 4 year degree       | US$25,000.00 | US$75,000.00 |
+----+--------------+------------------------+---------------------+--------------+--------------+","[{'positionID': '1', 'positiontitle': 'Account Representative', 'educationrequired': '4 year degree', 'minsalary': 'US$25,000.00', 'maxsalary': 'US$75,000.00'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
28,Give the full address of the office of the highest paid manager.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    import pandas as pd

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()

    # Get all employees data
    employee_df = employees.call()

    # Convert salary to numeric for comparison
    employee_df['salary_numeric'] = employee_df['salary'].apply(lambda x: float(x.replace('US$', '').replace(',', '')))

    # Find the highest paid manager
    highest_paid_employee = employee_df.loc[employee_df['salary_numeric'].idxmax()]

    # Get the locationID of the highest paid manager
    locationID = highest_paid_employee['locationID']

    # Get the full address of the office
    location_df = locations.call(locationID=(locationID, ""EQUAL""))
    full_address = location_df[['address', 'locationcity', 'state', 'zipcode']].iloc[0].to_dict()

    # Prepare the result
    result = {
        'full_address': full_address
    }

    return [result]","+----+-----------------------------------------------------------------------------------------+
|    | full_address                                                                            |
|----+-----------------------------------------------------------------------------------------|
|  0 | {'address': '3 Commons Blvd', 'locationcity': 'Boston', 'state': 'MA', 'zipcode': 2190} |
+----+-----------------------------------------------------------------------------------------+","[{'full_address': {'address': '3 Commons Blvd', 'locationcity': 'Boston', 'state': 'MA', 'zipcode': 2190}}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
29,What is the max salary for 'Tracy Coulter' if he/she stays on his/her position?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from position import GetDataFromPosition

    # Define the employee's name
    firstname = (""Tracy"", ""EQUAL"")
    lastname = (""Coulter"", ""EQUAL"")

    # Initialize the results list
    results = []

    # Get employee data
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=firstname, lastname=lastname)

    # Check if the employee exists
    if not employee_df.empty:
        # Get the position ID of the employee
        position_id = employee_df.iloc[0]['positionID']

        # Get position data
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = positions.call(positionID=(position_id, ""EQUAL""))

        # Check if the position exists
        if not position_df.empty:
            # Get the max salary for the position
            max_salary = position_df.iloc[0]['maxsalary']

            # Append the result
            results.append({
                'firstname': 'Tracy',
                'lastname': 'Coulter',
                'max_salary': max_salary
            })

    return results","+----+-------------+------------+---------------+
|    | firstname   | lastname   | max_salary    |
|----+-------------+------------+---------------|
|  0 | Tracy       | Coulter    | US$150,000.00 |
+----+-------------+------------+---------------+","[{'firstname': 'Tracy', 'lastname': 'Coulter', 'max_salary': 'US$150,000.00'}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
30,"If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee
from position import GetDataFromPosition

def pipeline_function():
    firstname = (""Jose"", ""EQUAL"")
    lastname = (""Rodriguez"", ""EQUAL"")

    results = []

    # Get employee data for Jose Rodriguez
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=firstname, lastname=lastname)

    if not employee_df.empty:
        # Assuming there's only one Jose Rodriguez
        employee = employee_df.iloc[0]
        current_salary = float(employee['salary'].replace(""US$"", """").replace("","", """"))
        positionID = employee['positionID']

        # Get position data for Jose Rodriguez's position
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = positions.call(positionID=(positionID, ""EQUAL""))

        if not position_df.empty:
            position = position_df.iloc[0]
            max_salary = float(position['maxsalary'])

            # Calculate the percentage increase possible
            if current_salary < max_salary:
                percentage_increase = ((max_salary - current_salary) / current_salary) * 100
            else:
                percentage_increase = 0.0

            results.append({
                'firstname': employee['firstname'],
                'lastname': employee['lastname'],
                'current_salary': employee['salary'],
                'max_salary': f""US${max_salary:,.2f}"",
                'percentage_increase': percentage_increase
            })

    return results",The pipeline did not run successfully,"[{'firstname': 'Tracy', 'lastname': 'Coulter', 'max_salary': 'US$150,000.00'}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
31,"How many employees whose performance is poor have a salary of over $50,000 per year?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Poor"", ""EQUAL"")
    salary = (""50000"", ""GREATER"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    
    # Clean and convert salary to float for comparison
    employee_df['salary'] = employee_df['salary'].str.replace(""US$"", """").str.replace("","", """").astype(float)
    
    # Filter employees with salary greater than 50000
    filtered_df = employee_df[employee_df['salary'] > 50000]
    
    # Count the number of employees
    count = filtered_df.shape[0]
    
    results.append({
        'count': count
    })
    
    return results","+----+---------+
|    |   count |
|----+---------|
|  0 |       2 |
+----+---------+",[{'count': 2}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
32,Who is the employee with the highest salary? Specify his/her full name.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee

def pipeline_function():
    results = []

    employees = GetDataFromEmployee()
    employees.open_connection()
    
    employee_df = employees.call()
    
    # Convert salary to numeric for comparison
    employee_df['numeric_salary'] = employee_df['salary'].apply(lambda x: float(x.replace('US$', '').replace(',', '')))
    
    # Find the employee with the highest salary
    highest_salary_employee = employee_df.loc[employee_df['numeric_salary'].idxmax()]
    
    # Prepare the result
    results.append({
        'fullname': f""{highest_salary_employee['firstname']} {highest_salary_employee['lastname']}""
    })
    
    return results","+----+-----------------+
|    | fullname        |
|----+-----------------|
|  0 | David Whitehead |
+----+-----------------+",[{'fullname': 'David Whitehead'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
33,"How many positions have a maximum salary of no more than US$1000,000?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    maxsalary = (1000000, ""MINOR OR EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(maxsalary=maxsalary)
    
    num_positions = position_df.shape[0]
    
    results.append({
        'num_positions': num_positions
    })
    
    return results","+----+-----------------+
|    |   num_positions |
|----+-----------------|
|  0 |               0 |
+----+-----------------+",[{'num_positions': 0}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
34,How much is the salary of the first ever employee that was hired?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee

    results = []

    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Get all employee data
    employee_df = employees.call()
    
    # Convert hiredate to datetime to find the earliest hire date
    employee_df['hiredate'] = pd.to_datetime(employee_df['hiredate'], format='%d-%m-%y')
    
    # Find the first ever hired employee
    first_hired_employee = employee_df.loc[employee_df['hiredate'].idxmin()]
    
    # Extract the salary and remove the ""US$"" and "","" for conversion to float
    salary_str = first_hired_employee['salary']
    salary_str = salary_str.replace(""US$"", """").replace("","", """")
    salary = float(salary_str)
    
    results.append({
        'first_hired_employee_salary': salary
    })
    
    return results",The pipeline did not run successfully,[{'num_positions': 0}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
35,How much is the minimum salary given to the position with the most complex work?,,,,,,
36,What is the full office location address where most of the employees work at?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation

    results = []

    # Initialize the data services
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    locations.open_connection()

    # Get all employee data
    employee_df = employees.call()

    # Find the locationID with the most employees
    most_common_locationID = employee_df['locationID'].mode().iloc[0]

    # Get the location details for the most common locationID
    location_df = locations.call(locationID=(most_common_locationID, ""EQUAL""))

    # Extract the full office location address
    for index, location in location_df.iterrows():
        results.append({
            'address': location['address'],
            'locationcity': location['locationcity'],
            'state': location['state'],
            'zipcode': location['zipcode']
        })

    return results","+----+------------------+----------------+---------+-----------+
|    | address          | locationcity   | state   |   zipcode |
|----+------------------+----------------+---------+-----------|
|  0 | 500 Loop Highway | Chicago        | IL      |     60620 |
+----+------------------+----------------+---------+-----------+","[{'address': '500 Loop Highway', 'locationcity': 'Chicago', 'state': 'IL', 'zipcode': 60620}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
37,What is the average salary of all employees with a 2 year degree position?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    import pandas as pd

    # Initialize the results list
    results = []

    # Get positions with a 2-year degree requirement
    educationrequired = (""2 year degree"", ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(educationrequired=educationrequired)

    # Extract position IDs that require a 2-year degree
    position_ids = position_df['positionID'].tolist()

    # Get employees with the specified position IDs
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()

    # Filter employees by position IDs
    filtered_employees = employee_df[employee_df['positionID'].isin(position_ids)]

    # Extract and clean salary data
    salaries = filtered_employees['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)

    # Calculate the average salary
    average_salary = salaries.mean()

    # Append the result to the results list
    results.append({
        'educationrequired': ""2 year degree"",
        'average salary': average_salary
    })

    return results","+----+---------------------+------------------+
|    | educationrequired   |   average salary |
|----+---------------------+------------------|
|  0 | 2 year degree       |          20333.3 |
+----+---------------------+------------------+","[{'educationrequired': '2 year degree', 'average salary': 20333.333333333332}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
38,How many male Regional Managers are there?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from position import GetDataFromPosition

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()

    # Open connections
    employees.open_connection()
    positions.open_connection()

    # Define the query parameters
    positiontitle = (""Regional Manager"", ""EQUAL"")
    gender = (""M"", ""EQUAL"")

    # Get the position ID for 'Regional Manager'
    position_df = positions.call(positiontitle=positiontitle)
    if position_df.empty:
        return [{'count': 0}]

    positionID = position_df['positionID'].iloc[0]

    # Get the employees who are male and have the position of 'Regional Manager'
    employee_df = employees.call(positionID=(positionID, ""EQUAL""), gender=gender)

    # Count the number of male Regional Managers
    count = employee_df.shape[0]

    return [{'count': count}]","+----+---------+
|    |   count |
|----+---------|
|  0 |       2 |
+----+---------+",[{'count': 2}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
39,Which position has the highest amount of poor performing employees?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from position import GetDataFromPosition

    # Initialize the data service for employees
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Fetch all employee data
    employee_df = employees.call()
    
    # Filter employees with poor performance
    poor_performance_df = employee_df[employee_df['performance'] == 'Poor']
    
    # Count the number of poor performing employees per position
    poor_performance_count = poor_performance_df.groupby('positionID').size().reset_index(name='count')
    
    # Find the position with the highest number of poor performing employees
    max_poor_performance = poor_performance_count[poor_performance_count['count'] == poor_performance_count['count'].max()]
    
    # Initialize the data service for positions
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Fetch all position data
    position_df = positions.call()
    
    # Merge to get position titles
    result_df = max_poor_performance.merge(position_df, on='positionID', how='left')
    
    # Prepare the result as a list of dictionaries
    results = result_df[['positionID', 'positiontitle', 'count']].to_dict(orient='records')
    
    return results","+----+--------------+-----------------+---------+
|    |   positionID | positiontitle   |   count |
|----+--------------+-----------------+---------|
|  0 |            2 | Manager         |       2 |
+----+--------------+-----------------+---------+","[{'positionID': 2, 'positiontitle': 'Manager', 'count': 2}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
40,Which position has the highest number of female employees with a 2 year degree?,,,,,,
41,How many Account Representatives are there in Illinois with satisfying performance?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation
    from position import GetDataFromPosition

    # Define the filters for the query
    state_filter = (""Illinois"", ""EQUAL"")
    positiontitle_filter = (""Account Representative"", ""EQUAL"")
    performance_filter = (""satisfying"", ""EQUAL"")

    # Initialize results list
    results = []

    # Get location data
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(state=state_filter)

    # Get position data
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle_filter)

    # Get employee data
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(performance=performance_filter)

    # Merge dataframes to filter employees based on location and position
    merged_df = employee_df.merge(location_df, on='locationID').merge(position_df, on='positionID')

    # Count the number of Account Representatives in Illinois with satisfying performance
    count = merged_df.shape[0]

    # Append the result to the results list
    results.append({
        'count': count
    })

    return results","+----+---------+
|    |   count |
|----+---------|
|  0 |       0 |
+----+---------+",[{'count': 0}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
42,What is the average salary of the worst performing managers?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee
import pandas as pd

def pipeline_function():
    # Define the performance criteria for the worst performing managers
    performance = (""Poor"", ""EQUAL"")
    positionID = (1, ""EQUAL"")  # Assuming positionID 1 corresponds to managers

    results = []

    # Initialize the data service
    employees = GetDataFromEmployee()
    
    # Open connection to the data service
    employees.open_connection()
    
    # Retrieve employee data with the specified performance and position
    employee_df = employees.call(performance=performance, positionID=positionID)
    
    # Extract and clean the salary data
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    # Calculate the average salary
    average_salary = salaries.mean()
    
    # Append the result to the list
    results.append({
        'performance': performance[0],
        'average salary': average_salary
    })
    
    return results","+----+---------------+------------------+
|    | performance   |   average salary |
|----+---------------+------------------|
|  0 | Poor          |            40000 |
+----+---------------+------------------+","[{'performance': 'Poor', 'average salary': 40000.0}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
43,In which state can you find the highest amount of good performing Account Representatives?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation
    from position import GetDataFromPosition

    # Step 1: Get all Account Representatives
    positiontitle = (""Account Representative"", ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)

    # Step 2: Filter employees who are Account Representatives
    position_ids = position_df['positionID'].tolist()
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()

    account_representatives_df = employee_df[employee_df['positionID'].isin(position_ids)]

    # Step 3: Filter good performing Account Representatives
    good_performance_df = account_representatives_df[account_representatives_df['performance'] == 'Good']

    # Step 4: Count good performing Account Representatives by location
    location_counts = good_performance_df['locationID'].value_counts()

    # Step 5: Get location details
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call()

    # Step 6: Merge location counts with location details
    location_counts_df = location_counts.reset_index()
    location_counts_df.columns = ['locationID', 'count']
    merged_df = location_counts_df.merge(location_df, on='locationID')

    # Step 7: Find the state with the highest count
    max_count = merged_df['count'].max()
    top_state_df = merged_df[merged_df['count'] == max_count]

    # Prepare the result
    results = []
    for _, row in top_state_df.iterrows():
        results.append({
            'state': row['state'],
            'count': row['count']
        })

    return results","+----+---------+---------+
|    | state   |   count |
|----+---------+---------|
|  0 | IL      |       2 |
+----+---------+---------+","[{'state': 'IL', 'count': 2}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
44,Mention the employee's full name and performance status who got the lowest in salary per year.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee

    results = []

    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()

    # Convert salary to numeric for comparison
    employee_df['numeric_salary'] = employee_df['salary'].str.replace(""US$"", """").str.replace("","", """").astype(float)

    # Find the employee with the lowest salary
    min_salary_row = employee_df.loc[employee_df['numeric_salary'].idxmin()]

    # Extract the required information
    full_name = f""{min_salary_row['firstname']} {min_salary_row['lastname']}""
    performance_status = min_salary_row['performance']

    results.append({
        'full_name': full_name,
        'performance_status': performance_status
    })

    return results","+----+----------------+----------------------+
|    | full_name      | performance_status   |
|----+----------------+----------------------|
|  0 | Marietta Brown | Poor                 |
+----+----------------+----------------------+","[{'full_name': 'Marietta Brown', 'performance_status': 'Poor'}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
45,List the location cities in the Western states.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    western_states = [""California"", ""Oregon"", ""Washington"", ""Nevada"", ""Idaho"", ""Montana"", ""Wyoming"", ""Utah"", ""Colorado"", ""Arizona"", ""New Mexico"", ""Alaska"", ""Hawaii""]

    results = []

    locations = GetDataFromLocation()
    locations.open_connection()

    location_df = locations.call()

    for index, location in location_df.iterrows():
        if location['state'] in western_states:
            results.append({
                'locationcity': location['locationcity']
            })

    return results",,[],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
46,Which city and address has zip code of above 90000?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from location import GetDataFromLocation

    # Initialize the data service
    locations = GetDataFromLocation()
    locations.open_connection()

    # Define the query parameter for zip code greater than 90000
    zipcode = (90000, ""GREATER"")

    # Fetch the data from the location service
    location_df = locations.call(zipcode=zipcode)

    # Prepare the result list
    results = []

    # Iterate over the dataframe and collect city and address
    for index, row in location_df.iterrows():
        results.append({
            'locationcity': row['locationcity'],
            'address': row['address']
        })

    return results","+----+----------------+--------------+
|    | locationcity   | address      |
|----+----------------+--------------|
|  0 | Los Angeles    | 1400 Main St |
+----+----------------+--------------+","[{'locationcity': 'Los Angeles', 'address': '1400 Main St'}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
47,Which positions are suitable with 4 years degree education?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    educationrequired = (""4 years degree"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(educationrequired=educationrequired)
    
    for _, row in position_df.iterrows():
        results.append({
            'positionID': row['positionID'],
            'positiontitle': row['positiontitle'],
            'educationrequired': row['educationrequired'],
            'minsalary': row['minsalary'],
            'maxsalary': row['maxsalary']
        })
    
    return results",,[],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
48,"What is the maximum salary of position ""Trainer""?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    positiontitle = (""Trainer"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    maxsalary = position_df['maxsalary'].iloc[0]
    maxsalary = maxsalary.replace(""US$"", """").replace("","", """")
    maxsalary = float(maxsalary)
    
    results.append({
        'positiontitle': ""Trainer"",
        'max_salary': maxsalary
    })
    
    return results",The pipeline did not run successfully,[],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
49,List the full name and social security number of the account representative with average performance.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee

def pipeline_function():
    results = []

    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Fetch all employees data
    employee_df = employees.call()
    
    # Filter employees with average performance
    average_performance_df = employee_df[employee_df['performance'] == 'average']
    
    # Extract full name and social security number
    for _, row in average_performance_df.iterrows():
        full_name = f""{row['firstname']} {row['lastname']}""
        ssn = row['ssn']
        results.append({
            'full_name': full_name,
            'ssn': ssn
        })
    
    return results",,[],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
50,When was Emily Wood hired? Mention her position and salary.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee
from position import GetDataFromPosition

def pipeline_function():
    firstname = (""Emily"", ""EQUAL"")
    lastname = (""Wood"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(firstname=firstname, lastname=lastname)
    if not employee_df.empty:
        employee_info = employee_df.iloc[0]
        positionID = employee_info[""positionID""]
        position_df = positions.call(positionID=(positionID, ""EQUAL""))
        if not position_df.empty:
            position_info = position_df.iloc[0]
            results.append({
                'hiredate': employee_info['hiredate'],
                'position': position_info['positiontitle'],
                'salary': employee_info['salary']
            })
    
    return results","+----+------------+------------+--------------+
|    | hiredate   | position   | salary       |
|----+------------+------------+--------------|
|  0 | 3/12/97    | Manager    | US$69,000.00 |
+----+------------+------------+--------------+","[{'hiredate': '3/12/97', 'position': 'Manager', 'salary': 'US$69,000.00'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
51,What are the maximum and minimum salary range and position title of Bill Marlin?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    firstname = (""Bill"", ""EQUAL"")
    lastname = (""Marlin"", ""EQUAL"")

    results = []

    # Get employee data
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=firstname, lastname=lastname)

    # Extract positionID
    position_ids = employee_df['positionID'].unique()

    # Get position data
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call()

    # Filter position data for the relevant position IDs
    relevant_positions = position_df[position_df['positionID'].isin(position_ids)]

    for _, row in relevant_positions.iterrows():
        minsalary = row['minsalary']
        minsalary = minsalary.replace(""US$"", """").replace("","", """")
        minsalary = float(minsalary)

        maxsalary = row['maxsalary']
        maxsalary = maxsalary.replace(""US$"", """").replace("","", """")
        maxsalary = float(maxsalary)

        results.append({
            'positiontitle': row['positiontitle'],
            'minsalary': minsalary,
            'maxsalary': maxsalary
        })

    return results","+----+-----------------+-------------+-------------+
|    | positiontitle   |   minsalary |   maxsalary |
|----+-----------------+-------------+-------------|
|  0 | Manager         |       50000 |      150000 |
+----+-----------------+-------------+-------------+","[{'positiontitle': 'Manager', 'minsalary': 50000.0, 'maxsalary': 150000.0}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
52,"List the full names, gender and positions who's location is in New York city.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation
    from position import GetDataFromPosition

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    positions = GetDataFromPosition()

    # Open connections
    employees.open_connection()
    locations.open_connection()
    positions.open_connection()

    # Get locationID for New York City
    locationcity = (""New York"", ""EQUAL"")
    location_df = locations.call(locationcity=locationcity)
    ny_location_ids = location_df['locationID'].tolist()

    # Get employees in New York City
    employee_df = employees.call(locationID=(ny_location_ids, ""EQUAL""))

    # Get all positions
    position_df = positions.call()

    # Merge employee and position data
    merged_df = employee_df.merge(position_df, on='positionID', how='inner')

    # Prepare the result
    results = []
    for index, row in merged_df.iterrows():
        full_name = f""{row['firstname']} {row['lastname']}""
        results.append({
            'full_name': full_name,
            'gender': row['gender'],
            'position': row['positiontitle']
        })

    return results",The pipeline did not run successfully,"[{'positiontitle': 'Manager', 'minsalary': 50000.0, 'maxsalary': 150000.0}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
53,"Mention the full name, hired date and performance status of the employee whose location is in Utah state.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee
from location import GetDataFromLocation

def pipeline_function():
    state = (""Utah"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    locations.open_connection()
    
    location_df = locations.call(state=state)
    location_ids = location_df[""locationID""].tolist()
    
    if location_ids:
        employee_df = employees.call(locationID=(location_ids, ""EQUAL""))
        for _, row in employee_df.iterrows():
            results.append({
                'fullname': f""{row['firstname']} {row['lastname']}"",
                'hiredate': row['hiredate'],
                'performance': row['performance']
            })
    
    return results",,[],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
54,"Among the employees with poor performance, provide the managers' full names, location city, address and its zip code.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","from employee import GetDataFromEmployee
from location import GetDataFromLocation
from position import GetDataFromPosition

def pipeline_function():
    performance = (""poor"", ""EQUAL"")
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    # Get positionID for Managers
    position_df = positions.call(positiontitle=positiontitle)
    manager_positionID = position_df['positionID'].iloc[0]
    
    # Get employees with poor performance
    employee_df = employees.call(performance=performance, positionID=(manager_positionID, ""EQUAL""))
    
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        if not locations_df.empty:
            location_info = locations_df.iloc[0]
            results.append({
                'fullname': f""{employee['firstname']} {employee['lastname']}"",
                'locationcity': location_info['locationcity'],
                'address': location_info['address'],
                'zipcode': location_info['zipcode']
            })
    
    return results",,[],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    positiontitle = (""Manager"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    positionID = position_df['positionID'].iloc[0]
    
    employee_df = employees.call(positionID=(positionID, ""EQUAL""))
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    return results
"
55,What is the education required to be account representative? Mention account representative full name and salary who got poor in performance status.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from position import GetDataFromPosition

    # Initialize results list
    results = []

    # Get positionID for 'Account Representative'
    positiontitle = (""Account Representative"", ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)

    if not position_df.empty:
        account_rep_position_id = position_df.iloc[0]['positionID']
        education_required = position_df.iloc[0]['educationrequired']

        # Get employees with 'Account Representative' position and 'Poor' performance
        positionID = (account_rep_position_id, ""EQUAL"")
        performance = (""Poor"", ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(positionID=positionID, performance=performance)

        # Process each employee
        for _, row in employee_df.iterrows():
            salary = row['salary'].replace(""US$"", """").replace("","", """")
            results.append({
                'fullname': f""{row['firstname']} {row['lastname']}"",
                'salary': salary,
                'education_required': education_required
            })

    return results","+----+-----------------+----------+----------------------+
|    | fullname        |   salary | education_required   |
|----+-----------------+----------+----------------------|
|  0 | Kenneth Charles |    40000 | 4 year degree        |
+----+-----------------+----------+----------------------+","[{'fullname': 'Kenneth Charles', 'salary': '40000.00', 'education_required': '4 year degree'}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    positiontitle = (""Account Representative"", ""EQUAL"")

    results = []

    positions = GetDataFromPosition()
    
    positions.open_connection()
    
    position_df = positions.call(positiontitle=positiontitle)
    
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    
    mean_salary = str(mean_salary)
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    return results
"
56,"Write down the full name, performance status and located city of the employee who's social security number is ""767-74-7373"".","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    ssn = (""767-74-7373"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    
    employees.open_connection()
    locations.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    employee_info = employee_df.iloc[0]
    
    locationID = employee_info[""locationID""]
    location_df = locations.call(locationID=(locationID, ""EQUAL""))
    location_info = location_df.iloc[0]
    
    results.append({
        'fullname': f""{employee_info['firstname']} {employee_info['lastname']}"",
        'performance': employee_info['performance'],
        'locationcity': location_info['locationcity']
    })
    
    return results","+----+----------------+---------------+----------------+
|    | fullname       | performance   | locationcity   |
|----+----------------+---------------+----------------|
|  0 | William Martin | Good          | New York City  |
+----+----------------+---------------+----------------+","[{'fullname': 'William Martin', 'performance': 'Good', 'locationcity': 'New York City'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
57,"Describe the employees' full name, positions, located city and office phone number within Colorado state.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    from employee import GetDataFromEmployee
    from location import GetDataFromLocation
    from position import GetDataFromPosition

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    positions = GetDataFromPosition()

    # Open connections
    employees.open_connection()
    locations.open_connection()
    positions.open_connection()

    # Get all employees
    employee_df = employees.call()

    # Get all locations in Colorado
    location_df = locations.call(state=(""Colorado"", ""EQUAL""))

    # Filter employees based on location in Colorado
    colorado_location_ids = location_df[""locationID""].tolist()
    colorado_employees_df = employee_df[employee_df[""locationID""].isin(colorado_location_ids)]

    # Get all positions
    position_df = positions.call()

    # Prepare the result list
    results = []

    # Iterate over each employee in Colorado
    for _, employee in colorado_employees_df.iterrows():
        # Get the position title
        position_title = position_df[position_df[""positionID""] == employee[""positionID""]][""positiontitle""].iloc[0]

        # Get the location details
        location_details = location_df[location_df[""locationID""] == employee[""locationID""]].iloc[0]

        # Append the employee details to the results
        results.append({
            'fullname': f""{employee['firstname']} {employee['lastname']}"",
            'position': position_title,
            'city': location_details['locationcity'],
            'officephone': location_details['officephone']
        })

    return results",,[],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    ssn = (""222-52-5555"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    employees.open_connection()
    positions.open_connection()
    
    employee_df = employees.call(ssn=ssn)
    positionID = employee_df[""positionID""].iloc[0]
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_info = position_df.iloc[0]
    
    position_info = position_info.astype(str)  
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    return results
"
58,"Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        You may select data trough any combination of this attributes. They are all optional.
        For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        If all attributes are left undeclared, it returns all the available data.

        Example usage:
        - If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)

        Things to keep in mind:
        - The frame is a pandas dataframe, so you may order, project and group the result if needed. - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition","def pipeline_function():
    import pandas as pd

    # Initialize the data service classes
    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    locations = GetDataFromLocation()

    # Open connections
    employees.open_connection()
    positions.open_connection()
    locations.open_connection()

    # Get all employee data
    employee_df = employees.call()

    # Convert salary to float for comparison
    employee_df['salary'] = employee_df['salary'].str.replace(""US$"", """").str.replace("","", """").astype(float)

    # Find the employee with the highest salary
    highest_salary_employee = employee_df.loc[employee_df['salary'].idxmax()]

    # Calculate the monthly average salary
    monthly_average_salary = highest_salary_employee['salary'] / 12

    # Get position title
    positionID = highest_salary_employee['positionID']
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_title = position_df.iloc[0]['positiontitle']

    # Get location city
    locationID = highest_salary_employee['locationID']
    location_df = locations.call(locationID=(locationID, ""EQUAL""))
    location_city = location_df.iloc[0]['locationcity']

    # Prepare the result
    result = {
        'name': f""{highest_salary_employee['firstname']} {highest_salary_employee['lastname']}"",
        'position_title': position_title,
        'location_city': location_city,
        'monthly_average_salary': monthly_average_salary
    }

    return [result]","+----+-----------------+------------------+-----------------+--------------------------+
|    | name            | position_title   | location_city   |   monthly_average_salary |
|----+-----------------+------------------+-----------------+--------------------------|
|  0 | David Whitehead | Regional Manager | Boston          |                  14583.3 |
+----+-----------------+------------------+-----------------+--------------------------+","[{'name': 'David Whitehead', 'position_title': 'Regional Manager', 'location_city': 'Boston', 'monthly_average_salary': 14583.333333333334}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    performance = (""Good"", ""EQUAL"")

    results = []

    employees = GetDataFromEmployee()
    
    employees.open_connection()
    
    employee_df = employees.call(performance=performance)
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    average_salary = salaries.mean()
    
    average_salary = str(average_salary)
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    return results"
