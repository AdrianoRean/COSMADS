index,question,data_services,advice,pipeline,output,output_json,example_query,example_pipeline
0,Which employee has the highest salary? Please give his or her full name.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee

def pipeline_function():
    # Initialize the data service
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Retrieve all employee data
    employee_df = employees.call()
    
    # Convert salary to numeric for comparison
    employee_df['numeric_salary'] = employee_df['salary'].apply(lambda x: float(x.replace('US$', '').replace(',', '')))
    
    # Find the employee with the highest salary
    max_salary_employee = employee_df.loc[employee_df['numeric_salary'].idxmax()]
    
    # Prepare the result as a list of dictionaries
    result = [{
        ""fullname"": f""{max_salary_employee['firstname']} {max_salary_employee['lastname']}""
    }]
    
    return result","+----+-----------------+
|    | fullname        |
|----+-----------------|
|  0 | David Whitehead |
+----+-----------------+",[{'fullname': 'David Whitehead'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
1,How many emplyees have a good job performance?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee

def pipeline_function():
    # Initialize the data service for employees
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Define the filter for good job performance
    performance_filter = ('Good', ""EQUAL"")
    
    # Fetch the data with the specified filter
    employee_df = employees.call(performance=performance_filter)
    
    # Convert the resulting DataFrame to a list of dictionaries
    result = employee_df.to_dict(orient='records')
    
    return result","+----+-------------+------------+-------------+------------+---------------+----------+---------------+--------------+--------------+
|    | ssn         | lastname   | firstname   | hiredate   | salary        | gender   | performance   |   positionID |   locationID |
|----+-------------+------------+-------------+------------+---------------+----------+---------------+--------------+--------------|
|  0 | 109-87-6544 | Foster     | Harold      | 8/14/05    | US$55,000.00  | M        | Good          |            1 |            3 |
|  1 | 111-12-1111 | Johnson    | James       | 5/3/96     | US$47,500.00  | M        | Good          |            1 |            3 |
|  2 | 123-45-6789 | Coulter    | Tracy       | 2/14/93    | US$100,000.00 |          | Good          |            2 |            1 |
|  3 | 333-43-4444 | Smith      | Frank       | 1/29/91    | US$65,000.00  | M        | Good          |            1 |            1 |
|  4 | 335-55-5533 | Jones      | Holly       | 4/8/86     | US$65,000.00  | F        | Good          |            2 |            5 |
|  5 | 432-19-8765 | Bronson    | Paul        | 11/20/03   | US$58,000.00  | M        | Good          |            2 |            6 |
|  6 | 444-45-4444 | Frank      | Vernon      | 4/10/85    | US$75,000.00  | M        | Good          |            1 |            4 |
|  7 | 500-50-0505 | Rodriguez  | Jose        | 7/16/98    | US$150,000.00 | M        | Good          |            4 |            5 |
|  8 | 612-99-1111 | Roberts    | Melissa     | 5/14/84    | US$79,000.00  | F        | Good          |            2 |            3 |
|  9 | 767-74-7373 | Martin     | William     | 8/26/06    | US$23,000.00  | M        | Good          |            3 |            5 |
| 10 | 925-45-7116 | Whitehead  | David       | 7/25/80    | US$175,000.00 | M        | Good          |            4 |            2 |
+----+-------------+------------+-------------+------------+---------------+----------+---------------+--------------+--------------+","[{'ssn': '109-87-6544', 'lastname': 'Foster', 'firstname': 'Harold', 'hiredate': '8/14/05', 'salary': 'US$55,000.00', 'gender': 'M', 'performance': 'Good', 'positionID': 1, 'locationID': 3}, {'ssn': '111-12-1111', 'lastname': 'Johnson', 'firstname': 'James', 'hiredate': '5/3/96', 'salary': 'US$47,500.00', 'gender': 'M', 'performance': 'Good', 'positionID': 1, 'locationID': 3}, {'ssn': '123-45-6789', 'lastname': 'Coulter', 'firstname': 'Tracy', 'hiredate': '2/14/93', 'salary': 'US$100,000.00', 'gender': None, 'performance': 'Good', 'positionID': 2, 'locationID': 1}, {'ssn': '333-43-4444', 'lastname': 'Smith', 'firstname': 'Frank', 'hiredate': '1/29/91', 'salary': 'US$65,000.00', 'gender': 'M', 'performance': 'Good', 'positionID': 1, 'locationID': 1}, {'ssn': '335-55-5533', 'lastname': 'Jones', 'firstname': 'Holly', 'hiredate': '4/8/86', 'salary': 'US$65,000.00', 'gender': 'F', 'performance': 'Good', 'positionID': 2, 'locationID': 5}, {'ssn': '432-19-8765', 'lastname': 'Bronson', 'firstname': 'Paul', 'hiredate': '11/20/03', 'salary': 'US$58,000.00', 'gender': 'M', 'performance': 'Good', 'positionID': 2, 'locationID': 6}, {'ssn': '444-45-4444', 'lastname': 'Frank', 'firstname': 'Vernon', 'hiredate': '4/10/85', 'salary': 'US$75,000.00', 'gender': 'M', 'performance': 'Good', 'positionID': 1, 'locationID': 4}, {'ssn': '500-50-0505', 'lastname': 'Rodriguez', 'firstname': 'Jose', 'hiredate': '7/16/98', 'salary': 'US$150,000.00', 'gender': 'M', 'performance': 'Good', 'positionID': 4, 'locationID': 5}, {'ssn': '612-99-1111', 'lastname': 'Roberts', 'firstname': 'Melissa', 'hiredate': '5/14/84', 'salary': 'US$79,000.00', 'gender': 'F', 'performance': 'Good', 'positionID': 2, 'locationID': 3}, {'ssn': '767-74-7373', 'lastname': 'Martin', 'firstname': 'William', 'hiredate': '8/26/06', 'salary': 'US$23,000.00', 'gender': 'M', 'performance': 'Good', 'positionID': 3, 'locationID': 5}, {'ssn': '925-45-7116', 'lastname': 'Whitehead', 'firstname': 'David', 'hiredate': '7/25/80', 'salary': 'US$175,000.00', 'gender': 'M', 'performance': 'Good', 'positionID': 4, 'locationID': 2}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
2,"Please list the social security numbers of the male employees with a salary of over $70,000 a year.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee

def parse_salary(salary_str):
    # Remove 'US$' and ',' then convert to float
    return float(salary_str.replace('US$', '').replace(',', ''))

def pipeline_function():
    # Initialize the data service
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Define the filters
    gender_filter = ('M', ""EQUAL"")
    
    # Fetch the data
    employee_df = employees.call(gender=gender_filter)
    
    # Filter the dataframe for salary over $70,000
    employee_df['salary'] = employee_df['salary'].apply(parse_salary)
    filtered_df = employee_df[employee_df['salary'] > 70000]
    
    # Extract the social security numbers
    result = filtered_df[['ssn']].to_dict(orient='records')
    
    return result","+----+-------------+
|    | ssn         |
|----+-------------|
|  0 | 222-23-2222 |
|  1 | 444-45-4444 |
|  2 | 500-50-0505 |
|  3 | 925-45-7116 |
+----+-------------+","[{'ssn': '222-23-2222'}, {'ssn': '444-45-4444'}, {'ssn': '500-50-0505'}, {'ssn': '925-45-7116'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
3,What is the required education for the position of regional manager?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Define the filter for the position title 'Regional Manager'
    positiontitle = ('Regional Manager', ""EQUAL"")
    
    # Initialize the data service for positions
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Fetch the data for the specified position title
    position_df = positions.call(positiontitle=positiontitle)
    
    # Extract the required education for the 'Regional Manager' position
    required_education_list = position_df[['educationrequired']].to_dict(orient='records')
    
    return required_education_list","+----+---------------------+
|    | educationrequired   |
|----+---------------------|
|  0 | 6 year degree       |
+----+---------------------+",[{'educationrequired': '6 year degree'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
4,"Which position has a lower minimum salary, Account Representative or Trainee?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Open connection to the position data service
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Define the position titles we are interested in
    account_representative_title = ('Account Representative', ""EQUAL"")
    trainee_title = ('Trainee', ""EQUAL"")
    
    # Fetch data for Account Representative
    account_representative_df = positions.call(positiontitle=account_representative_title)
    
    # Fetch data for Trainee
    trainee_df = positions.call(positiontitle=trainee_title)
    
    # Extract minimum salaries and convert them to numeric values
    account_representative_min_salary = pd.to_numeric(account_representative_df['minsalary'].str.replace('US$', '').str.replace(',', ''))
    trainee_min_salary = pd.to_numeric(trainee_df['minsalary'].str.replace('US$', '').str.replace(',', ''))
    
    # Determine which position has the lower minimum salary
    if account_representative_min_salary.min() < trainee_min_salary.min():
        result = [{'position': 'Account Representative', 'min_salary': account_representative_min_salary.min()}]
    else:
        result = [{'position': 'Trainee', 'min_salary': trainee_min_salary.min()}]
    
    return result","+----+------------+--------------+
|    | position   |   min_salary |
|----+------------+--------------|
|  0 | Trainee    |        18000 |
+----+------------+--------------+","[{'position': 'Trainee', 'min_salary': 18000.0}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
5,In which city's office does Sandy Adams work at?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get the employee data for Sandy Adams
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=('Sandy', ""EQUAL""), lastname=('Adams', ""EQUAL""))
    
    # Check if we have the employee data
    if employee_df.empty:
        return []
    
    # Get the locationID for Sandy Adams
    location_id = employee_df.iloc[0]['locationID']
    
    # Step 2: Get the location data for the given locationID
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationID=(location_id, ""EQUAL""))
    
    # Check if we have the location data
    if location_df.empty:
        return []
    
    # Get the city name
    city_name = location_df.iloc[0]['locationcity']
    
    # Return the result as a list of dictionaries
    result = [{""city"": city_name}]
    return result","+----+---------+
|    | city    |
|----+---------|
|  0 | Atlanta |
+----+---------+",[{'city': 'Atlanta'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
6,"Among the employees working at the office in New York, how many of them have a good job performance?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get the locationID for New York
    locationcity = ('New York City', ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationcity=locationcity)
    
    # Check if we have a valid locationID for New York
    if location_df.empty:
        return []
    
    new_york_location_ids = location_df['locationID'].tolist()
    
    # Step 2: Get employees with good performance in New York
    performance = ('Good', ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(performance=performance)
    
    # Filter employees based on New York location IDs
    ny_good_performance_employees = employee_df[employee_df['locationID'].isin(new_york_location_ids)]
    
    # Step 3: Prepare the result
    result = [{""count"": len(ny_good_performance_employees)}]
    
    return result","+----+---------+
|    |   count |
|----+---------|
|  0 |       3 |
+----+---------+",[{'count': 3}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
7,What is the office phone number of the location at which Sandy Adams works?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import threading
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    result = []

    def get_employee_location_id():
        nonlocal employee_location_id
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(firstname=('Sandy', ""EQUAL""), lastname=('Adams', ""EQUAL""))
        if not employee_df.empty:
            employee_location_id = employee_df.iloc[0]['locationID']

    def get_office_phone():
        nonlocal result
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = locations.call(locationID=(employee_location_id, ""EQUAL""))
        if not location_df.empty:
            office_phone = location_df.iloc[0]['officephone']
            result = [{""officephone"": office_phone}]

    employee_location_id = None

    # Create threads for parallel execution
    thread1 = threading.Thread(target=get_employee_location_id)
    thread2 = threading.Thread(target=get_office_phone)

    # Start threads
    thread1.start()
    thread1.join()  # Ensure employee location ID is fetched before fetching office phone
    if employee_location_id is not None:
        thread2.start()
        thread2.join()

    return result","+----+---------------+
|    | officephone   |
|----+---------------|
|  0 | (404)333-5555 |
+----+---------------+",[{'officephone': '(404)333-5555'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
8,How many male employees work at the address 450 Peachtree Rd?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get the locationID for the address 450 Peachtree Rd
    address = ('450 Peachtree Rd', ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(address=address)
    
    if location_df.empty:
        return []
    
    # Extract the locationID for the given address
    location_id = location_df.iloc[0]['locationID']
    
    # Step 2: Get the male employees working at the location with the obtained locationID
    gender = ('M', ""EQUAL"")
    locationID = (location_id, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(gender=gender, locationID=locationID)
    
    # Convert the result to a list of dictionaries
    result = employee_df.to_dict(orient='records')
    
    return result","+----+-------------+------------+-------------+------------+--------------+----------+---------------+--------------+--------------+
|    | ssn         | lastname   | firstname   | hiredate   | salary       | gender   | performance   |   positionID |   locationID |
|----+-------------+------------+-------------+------------+--------------+----------+---------------+--------------+--------------|
|  0 | 333-43-4444 | Smith      | Frank       | 1/29/91    | US$65,000.00 | M        | Good          |            1 |            1 |
+----+-------------+------------+-------------+------------+--------------+----------+---------------+--------------+--------------+","[{'ssn': '333-43-4444', 'lastname': 'Smith', 'firstname': 'Frank', 'hiredate': '1/29/91', 'salary': 'US$65,000.00', 'gender': 'M', 'performance': 'Good', 'positionID': 1, 'locationID': 1}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
9,How many employees work as an Account Representative?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get the positionID for 'Account Representative'
    positiontitle = ('Account Representative', ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)
    
    if position_df.empty:
        return []
    
    account_representative_positionID = position_df.iloc[0]['positionID']
    
    # Step 2: Get employees with the positionID of 'Account Representative'
    positionID = (account_representative_positionID, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(positionID=positionID)
    
    # Step 3: Return the count of employees as a list of a single dictionary
    employee_count = len(employee_df)
    result = [{""employee_count"": employee_count}]
    
    return result","+----+------------------+
|    |   employee_count |
|----+------------------|
|  0 |               10 |
+----+------------------+",[{'employee_count': 10}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
10,How much higher is James Johnson's salary from the minimum salary of his title?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def parse_salary(salary_str):
    return float(salary_str.replace(""US$"", """").replace("","", """"))

def pipeline_function():
    # Step 1: Get James Johnson's employee data
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=(""James"", ""EQUAL""), lastname=(""Johnson"", ""EQUAL""))
    
    if employee_df.empty:
        return []

    # Extract James Johnson's salary and positionID
    james_salary_str = employee_df.iloc[0]['salary']
    james_position_id = employee_df.iloc[0]['positionID']
    james_salary = parse_salary(james_salary_str)

    # Step 2: Get the minimum salary for James Johnson's position
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positionID=(james_position_id, ""EQUAL""))
    
    if position_df.empty:
        return []

    # Extract the minimum salary for the position
    min_salary_str = position_df.iloc[0]['minsalary']
    min_salary = parse_salary(min_salary_str)

    # Step 3: Calculate the difference
    salary_difference = james_salary - min_salary

    # Return the result as a list of dictionaries
    result = [{""salary_difference"": salary_difference}]
    return result","+----+---------------------+
|    |   salary_difference |
|----+---------------------|
|  0 |               22500 |
+----+---------------------+",[{'salary_difference': 22500.0}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
11,"Among the employees who are Trainees, how many of them work in New York?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get the positionID for 'Trainee'
    positiontitle = ('Trainee', ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)
    
    if position_df.empty:
        return []
    
    trainee_position_id = position_df.iloc[0]['positionID']
    
    # Step 2: Get the locationID for 'New York City'
    locationcity = ('New York City', ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationcity=locationcity)
    
    if location_df.empty:
        return []
    
    new_york_location_id = location_df.iloc[0]['locationID']
    
    # Step 3: Get employees who are Trainees and work in New York
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(positionID=(trainee_position_id, ""EQUAL""), locationID=(new_york_location_id, ""EQUAL""))
    
    # Step 4: Count the number of such employees
    count_of_trainees_in_ny = len(employee_df)
    
    # Return the result as a list of dictionaries
    return [{""count_of_trainees_in_ny"": count_of_trainees_in_ny}]","+----+---------------------------+
|    |   count_of_trainees_in_ny |
|----+---------------------------|
|  0 |                         1 |
+----+---------------------------+",[{'count_of_trainees_in_ny': 1}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
12,Please list the full names of the employees who are working as a Trainee.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Initialize the data service for employees and positions
    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    # Open connections
    employees.open_connection()
    positions.open_connection()
    
    # Get the positionID for 'Trainee'
    positiontitle = ('Trainee', ""EQUAL"")
    position_df = positions.call(positiontitle=positiontitle)
    
    # Check if we have a valid positionID for 'Trainee'
    if position_df.empty:
        return []
    
    trainee_position_id = position_df.iloc[0]['positionID']
    
    # Get employees with the positionID of 'Trainee'
    positionID = (trainee_position_id, ""EQUAL"")
    employee_df = employees.call(positionID=positionID)
    
    # Extract full names of employees
    result = []
    for _, row in employee_df.iterrows():
        full_name = f""{row['firstname']} {row['lastname']}""
        result.append({""full_name"": full_name})
    
    return result","+----+----------------+
|    | full_name      |
|----+----------------|
|  0 | Sandy Adams    |
|  1 | Marietta Brown |
|  2 | William Martin |
+----+----------------+","[{'full_name': 'Sandy Adams'}, {'full_name': 'Marietta Brown'}, {'full_name': 'William Martin'}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
13,"Which employee's job position requires a higher education level, Jose Rodriguez or Sandy Adams?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Open connections to the data services
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Fetch data for Jose Rodriguez and Sandy Adams
    employee_df = employees.call(lastname=('Rodriguez', 'EQUAL'), firstname=('Jose', 'EQUAL'))
    employee_df = employee_df.append(employees.call(lastname=('Adams', 'EQUAL'), firstname=('Sandy', 'EQUAL')))
    
    # Get the position IDs for both employees
    jose_position_id = employee_df[employee_df['lastname'] == 'Rodriguez']['positionID'].values[0]
    sandy_position_id = employee_df[employee_df['lastname'] == 'Adams']['positionID'].values[0]
    
    # Fetch position data for both employees
    jose_position_df = positions.call(positionID=(jose_position_id, 'EQUAL'))
    sandy_position_df = positions.call(positionID=(sandy_position_id, 'EQUAL'))
    
    # Compare education levels
    jose_education = jose_position_df['educationrequired'].values[0]
    sandy_education = sandy_position_df['educationrequired'].values[0]
    
    # Determine which employee's job position requires a higher education level
    if jose_education > sandy_education:
        result = [{'employee': 'Jose Rodriguez', 'education_required': jose_education}]
    else:
        result = [{'employee': 'Sandy Adams', 'education_required': sandy_education}]
    
    return result",The pipeline did not run successfully,"[{'full_name': 'Sandy Adams'}, {'full_name': 'Marietta Brown'}, {'full_name': 'William Martin'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
14,Please list the zip codes of the offices where all the male employees with a good job performance work at.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get all male employees with good performance
    gender = ('M', ""EQUAL"")
    performance = ('Good', ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(gender=gender, performance=performance)

    # Step 2: Extract unique locationIDs from the filtered employees
    location_ids = employee_df['locationID'].unique()

    # Step 3: Get location data for these locationIDs
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call()

    # Step 4: Filter location data to only include the relevant locationIDs
    filtered_location_df = location_df[location_df['locationID'].isin(location_ids)]

    # Step 5: Extract zip codes
    zip_codes = filtered_location_df['zipcode'].tolist()

    # Step 6: Return the result as a list of dictionaries
    result = [{'zipcode': zip_code} for zip_code in zip_codes]
    return result","+----+-----------+
|    |   zipcode |
|----+-----------|
|  0 |     30316 |
|  1 |      2190 |
|  2 |     60620 |
|  3 |     33103 |
|  4 |     15648 |
|  5 |     54657 |
+----+-----------+","[{'zipcode': 30316}, {'zipcode': 2190}, {'zipcode': 60620}, {'zipcode': 33103}, {'zipcode': 15648}, {'zipcode': 54657}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
15,Please list the social security numbers of all the employees who work in California.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Initialize the data service for locations
    locations = GetDataFromLocation()
    locations.open_connection()
    
    # Get all locations in California
    state = ('CA', ""EQUAL"")
    location_df = locations.call(state=state)
    
    # Extract location IDs for California
    california_location_ids = location_df['locationID'].tolist()
    
    # Initialize the data service for employees
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Get all employees
    employee_df = employees.call()
    
    # Filter employees who work in California
    california_employees = employee_df[employee_df['locationID'].isin(california_location_ids)]
    
    # Extract social security numbers
    ssn_list = california_employees['ssn'].tolist()
    
    # Convert to list of dictionaries
    result = [{'ssn': ssn} for ssn in ssn_list]
    
    return result",,[],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
16,"Among the employees who work as a Trainee, how many of them have a salary of over &20,000 a year?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get the positionID for 'Trainee'
    positiontitle = ('Trainee', ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)
    
    # Check if 'Trainee' position exists
    if position_df.empty:
        return []
    
    # Get the positionID for 'Trainee'
    trainee_position_id = position_df.iloc[0]['positionID']
    
    # Step 2: Get employees with positionID of 'Trainee'
    positionID = (trainee_position_id, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(positionID=positionID)
    
    # Step 3: Filter employees with salary over 20,000
    def parse_salary(salary_str):
        return float(salary_str.replace('US$', '').replace(',', ''))
    
    employee_df['salary'] = employee_df['salary'].apply(parse_salary)
    filtered_employees = employee_df[employee_df['salary'] > 20000]
    
    # Step 4: Return the count of such employees
    result = [{""count"": len(filtered_employees)}]
    
    return result","+----+---------+
|    |   count |
|----+---------|
|  0 |       1 |
+----+---------+",[{'count': 1}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
17,What is the average salary of the employees who work as a Trainee?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get the positionID for 'Trainee'
    positiontitle = ('Trainee', ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)
    
    # Check if 'Trainee' position exists
    if position_df.empty:
        return []
    
    trainee_position_id = position_df.iloc[0]['positionID']
    
    # Step 2: Get employees with positionID matching 'Trainee'
    positionID = (trainee_position_id, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(positionID=positionID)
    
    # Check if there are any employees with 'Trainee' position
    if employee_df.empty:
        return []
    
    # Step 3: Calculate the average salary
    # Convert salary from string to float
    employee_df['salary'] = employee_df['salary'].apply(lambda x: float(x.replace('US$', '').replace(',', '')))
    
    # Calculate average salary
    average_salary = employee_df['salary'].mean()
    
    # Return the result as a list of dictionaries
    result = [{""average_salary"": average_salary}]
    return result","+----+------------------+
|    |   average_salary |
|----+------------------|
|  0 |          20333.3 |
+----+------------------+",[{'average_salary': 20333.333333333332}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
18,By what percentage is the average salary of Trainees higher than the minimum salary of this postion?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def parse_salary(salary_str):
    return float(salary_str.replace(""US$"", """").replace("","", """"))

def calculate_percentage_increase(avg_salary, min_salary):
    return ((avg_salary - min_salary) / min_salary) * 100

def pipeline_function():
    # Get employee data
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()

    # Get position data
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call()

    # Filter employees with position title 'Trainee'
    trainee_position_id = position_df[position_df['positiontitle'] == 'Trainee']['positionID'].iloc[0]
    trainee_employees = employee_df[employee_df['positionID'] == trainee_position_id]

    # Calculate average salary of Trainees
    trainee_salaries = trainee_employees['salary'].apply(parse_salary)
    avg_trainee_salary = trainee_salaries.mean()

    # Get minimum salary for Trainee position
    min_salary_str = position_df[position_df['positiontitle'] == 'Trainee']['minsalary'].iloc[0]
    min_salary = parse_salary(min_salary_str)

    # Calculate percentage increase
    percentage_increase = calculate_percentage_increase(avg_trainee_salary, min_salary)

    # Return result as a list of dictionaries
    result = [{""percentage_increase"": percentage_increase}]
    return result","+----+-----------------------+
|    |   percentage_increase |
|----+-----------------------|
|  0 |                12.963 |
+----+-----------------------+",[{'percentage_increase': 12.962962962962957}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
19,Give the number of female employees.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee

def pipeline_function():
    # Open connection to the employee data service
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Fetch data for female employees
    gender_filter = ('F', ""EQUAL"")
    employee_df = employees.call(gender=gender_filter)
    
    # Count the number of female employees
    female_count = len(employee_df)
    
    # Return the result as a list of dictionaries
    result = [{""number_of_female_employees"": female_count}]
    return result","+----+------------------------------+
|    |   number_of_female_employees |
|----+------------------------------|
|  0 |                           12 |
+----+------------------------------+",[{'number_of_female_employees': 12}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
20,State the name of the city where Jose Rodriguez works.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get the employee data for Jose Rodriguez
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=('Jose', ""EQUAL""), lastname=('Rodriguez', ""EQUAL""))
    
    # Check if we have found the employee
    if employee_df.empty:
        return []
    
    # Step 2: Extract the locationID for Jose Rodriguez
    location_id = employee_df.iloc[0]['locationID']
    
    # Step 3: Get the location data for the extracted locationID
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationID=(location_id, ""EQUAL""))
    
    # Check if we have found the location
    if location_df.empty:
        return []
    
    # Step 4: Extract the city name
    city_name = location_df.iloc[0]['locationcity']
    
    # Return the result as a list of dictionaries
    return [{""locationcity"": city_name}]","+----+----------------+
|    | locationcity   |
|----+----------------|
|  0 | New York City  |
+----+----------------+",[{'locationcity': 'New York City'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
21,In which state does Emily Wood work?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get the employee data for Emily Wood
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=('Emily', ""EQUAL""), lastname=('Wood', ""EQUAL""))

    # Check if we have found Emily Wood
    if employee_df.empty:
        return []

    # Step 2: Extract the locationID for Emily Wood
    location_id = employee_df.iloc[0]['locationID']

    # Step 3: Get the location data for the extracted locationID
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationID=(location_id, ""EQUAL""))

    # Check if we have found the location
    if location_df.empty:
        return []

    # Step 4: Extract the state from the location data
    state = location_df.iloc[0]['state']

    # Return the result as a list of dictionaries
    return [{""state"": state}]","+----+---------+
|    | state   |
|----+---------|
|  0 | NY      |
+----+---------+",[{'state': 'NY'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
22,What is the education required for David Whitehead to reach his current position?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get the employee data for David Whitehead
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=('David', 'EQUAL'), lastname=('Whitehead', 'EQUAL'))
    
    # Check if the employee exists
    if employee_df.empty:
        return []
    
    # Step 2: Extract the positionID for David Whitehead
    position_id = employee_df.iloc[0]['positionID']
    
    # Step 3: Get the position data for the extracted positionID
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positionID=(position_id, 'EQUAL'))
    
    # Check if the position exists
    if position_df.empty:
        return []
    
    # Step 4: Extract the education required for the position
    education_required = position_df.iloc[0]['educationrequired']
    
    # Step 5: Return the result as a list of dictionaries
    result = [{'education_required': education_required}]
    return result","+----+----------------------+
|    | education_required   |
|----+----------------------|
|  0 | 6 year degree        |
+----+----------------------+",[{'education_required': '6 year degree'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
23,"How many employees are there in the ""Miami"" office?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get the locationID for the Miami office
    locationcity = ('Miami', ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationcity=locationcity)
    
    # Check if Miami office exists
    if location_df.empty:
        return [{""error"": ""Miami office not found""}]
    
    # Get the locationID for Miami
    miami_location_id = location_df.iloc[0]['locationID']
    
    # Step 2: Get employees in the Miami office
    locationID = (miami_location_id, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(locationID=locationID)
    
    # Count the number of employees in the Miami office
    num_employees = employee_df.shape[0]
    
    # Return the result as a list of dictionaries
    return [{""number_of_employees"": num_employees}]","+----+-----------------------+
|    |   number_of_employees |
|----+-----------------------|
|  0 |                     3 |
+----+-----------------------+",[{'number_of_employees': 3}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
24,"Who is the highest paid employee in ""Boston""? Give the full name.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get the locationID for Boston
    locationcity = ('Boston', ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationcity=locationcity)
    
    if location_df.empty:
        return []
    
    boston_location_id = location_df.iloc[0]['locationID']
    
    # Step 2: Get employees in Boston
    locationID = (boston_location_id, ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(locationID=locationID)
    
    if employee_df.empty:
        return []
    
    # Step 3: Find the highest paid employee
    # Convert salary to numeric for comparison
    employee_df['salary_numeric'] = employee_df['salary'].apply(lambda x: float(x.replace('US$', '').replace(',', '')))
    highest_paid_employee = employee_df.loc[employee_df['salary_numeric'].idxmax()]
    
    # Step 4: Prepare the result
    result = [{
        ""full_name"": f""{highest_paid_employee['firstname']} {highest_paid_employee['lastname']}""
    }]
    
    return result","+----+-----------------+
|    | full_name       |
|----+-----------------|
|  0 | David Whitehead |
+----+-----------------+",[{'full_name': 'David Whitehead'}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
25,Who is the employee in “New York City” with a good performance? Give the social security number of the employee.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Initialize the data service for employees and locations
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    
    # Open connections
    employees.open_connection()
    locations.open_connection()
    
    # Get the locationID for New York City
    locationcity = ('New York City', ""EQUAL"")
    location_df = locations.call(locationcity=locationcity)
    
    # Check if we have a valid locationID for New York City
    if location_df.empty:
        return []
    
    # Extract the locationID for New York City
    nyc_location_id = location_df.iloc[0]['locationID']
    
    # Get employees with good performance in New York City
    performance = ('Good', ""EQUAL"")
    locationID = (nyc_location_id, ""EQUAL"")
    employee_df = employees.call(performance=performance, locationID=locationID)
    
    # Extract the social security numbers of the employees
    result = employee_df[['ssn']].to_dict(orient='records')
    
    return result","+----+-------------+
|    | ssn         |
|----+-------------|
|  0 | 335-55-5533 |
|  1 | 500-50-0505 |
|  2 | 767-74-7373 |
+----+-------------+","[{'ssn': '335-55-5533'}, {'ssn': '500-50-0505'}, {'ssn': '767-74-7373'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
26,"How many ""account representatives"" are there in Chicago with a good performance?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    positions = GetDataFromPosition()

    # Open connections
    employees.open_connection()
    locations.open_connection()
    positions.open_connection()

    # Get the locationID for Chicago
    chicago_location_df = locations.call(locationcity=('Chicago', 'EQUAL'))
    chicago_location_ids = chicago_location_df['locationID'].tolist()

    # Get the positionID for Account Representative
    account_rep_position_df = positions.call(positiontitle=('Account Representative', 'EQUAL'))
    account_rep_position_ids = account_rep_position_df['positionID'].tolist()

    # Get employees with good performance in Chicago who are Account Representatives
    employee_df = employees.call(
        performance=('Good', 'EQUAL'),
        locationID=(chicago_location_ids, 'EQUAL'),
        positionID=(account_rep_position_ids, 'EQUAL')
    )

    # Count the number of such employees
    count = len(employee_df)

    # Return the result as a list of dictionaries
    return [{""count"": count}]",The pipeline did not run successfully,"[{'ssn': '335-55-5533'}, {'ssn': '500-50-0505'}, {'ssn': '767-74-7373'}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
27,What is Kenneth Charles's position title?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get the employee data for Kenneth Charles
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=('Kenneth', ""EQUAL""), lastname=('Charles', ""EQUAL""))
    
    # Check if the employee exists
    if employee_df.empty:
        return []
    
    # Step 2: Extract the positionID for Kenneth Charles
    position_id = employee_df.iloc[0]['positionID']
    
    # Step 3: Get the position title using the positionID
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positionID=(position_id, ""EQUAL""))
    
    # Check if the position exists
    if position_df.empty:
        return []
    
    # Extract the position title
    position_title = position_df.iloc[0]['positiontitle']
    
    # Return the result as a list of dictionaries
    return [{""position_title"": position_title}]","+----+------------------------+
|    | position_title         |
|----+------------------------|
|  0 | Account Representative |
+----+------------------------+",[{'position_title': 'Account Representative'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
28,Give the full address of the office of the highest paid manager.,,,,,,,
29,What is the max salary for 'Tracy Coulter' if he/she stays on his/her position?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get the employee data for Tracy Coulter
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=('Tracy', ""EQUAL""), lastname=('Coulter', ""EQUAL""))
    
    # Check if Tracy Coulter exists in the data
    if employee_df.empty:
        return []
    
    # Step 2: Extract the positionID for Tracy Coulter
    tracy_position_id = employee_df.iloc[0]['positionID']
    
    # Step 3: Get the position data for Tracy Coulter's position
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positionID=(tracy_position_id, ""EQUAL""))
    
    # Check if the position data is available
    if position_df.empty:
        return []
    
    # Step 4: Extract the max salary for the position
    max_salary_str = position_df.iloc[0]['maxsalary']
    
    # Convert the max salary to a float
    max_salary = float(max_salary_str.replace('US$', '').replace(',', ''))
    
    # Step 5: Return the result as a list of dictionaries
    result = [{""max_salary"": max_salary}]
    return result","+----+--------------+
|    |   max_salary |
|----+--------------|
|  0 |       150000 |
+----+--------------+",[{'max_salary': 150000.0}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
30,"If Jose Rodriguez tried his best, how many percentage can his salary raise without changing his position?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def parse_salary(salary_str):
    return float(salary_str.replace(""US$"", """").replace("","", """"))

def calculate_percentage_increase(current_salary, max_salary):
    return ((max_salary - current_salary) / current_salary) * 100

def pipeline_function():
    # Fetch employee data for Jose Rodriguez
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=(""Jose"", ""EQUAL""), lastname=(""Rodriguez"", ""EQUAL""))
    
    if employee_df.empty:
        return []

    # Extract Jose Rodriguez's data
    jose_data = employee_df.iloc[0]
    current_salary = parse_salary(jose_data['salary'])
    position_id = jose_data['positionID']

    # Fetch position data for Jose's position
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positionID=(position_id, ""EQUAL""))

    if position_df.empty:
        return []

    # Extract max salary for Jose's position
    position_data = position_df.iloc[0]
    max_salary = parse_salary(position_data['maxsalary'])

    # Calculate the percentage increase
    percentage_increase = calculate_percentage_increase(current_salary, max_salary)

    # Return the result as a list of dictionaries
    result = [{""percentage_increase"": percentage_increase}]
    return result","+----+-----------------------+
|    |   percentage_increase |
|----+-----------------------|
|  0 |               66.6667 |
+----+-----------------------+",[{'percentage_increase': 66.66666666666666}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
31,"How many employees whose performance is poor have a salary of over $50,000 per year?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee

def parse_salary(salary_str):
    """"""Helper function to parse salary string and return as integer.""""""
    return int(salary_str.replace('US$', '').replace(',', ''))

def pipeline_function():
    # Initialize the data service for employees
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Define the filters for performance and salary
    performance_filter = ('Poor', ""EQUAL"")
    # We will filter salary after fetching the data since it's a string and needs parsing
    employee_df = employees.call(performance=performance_filter)
    
    # Filter employees with salary over $50,000
    employee_df['salary'] = employee_df['salary'].apply(parse_salary)
    filtered_df = employee_df[employee_df['salary'] > 50000]
    
    # Count the number of employees
    count = len(filtered_df)
    
    # Return the result as a list of dictionaries
    return [{""count"": count}]",The pipeline did not run successfully,[{'percentage_increase': 66.66666666666666}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
32,Who is the employee with the highest salary? Specify his/her full name.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee

def pipeline_function():
    # Initialize the data service
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Retrieve all employee data
    employee_df = employees.call()
    
    # Convert salary to numeric for comparison
    employee_df['salary_numeric'] = employee_df['salary'].apply(lambda x: float(x.replace('US$', '').replace(',', '')))
    
    # Find the employee with the highest salary
    max_salary_employee = employee_df.loc[employee_df['salary_numeric'].idxmax()]
    
    # Prepare the result as a list of dictionaries
    result = [{
        ""fullname"": f""{max_salary_employee['firstname']} {max_salary_employee['lastname']}""
    }]
    
    return result","+----+-----------------+
|    | fullname        |
|----+-----------------|
|  0 | David Whitehead |
+----+-----------------+",[{'fullname': 'David Whitehead'}],Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
33,"How many positions have a maximum salary of no more than US$1000,000?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Define the condition for maxsalary
    maxsalary_condition = ('100000', ""MINOR OR EQUAL"")
    
    # Get data from the position service
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(maxsalary=maxsalary_condition)
    
    # Count the number of positions with maxsalary <= US$100,000
    count_positions = len(position_df)
    
    # Return the result as a list of dictionaries
    result = [{""count_positions"": count_positions}]
    return result","+----+-------------------+
|    |   count_positions |
|----+-------------------|
|  0 |                 0 |
+----+-------------------+",[{'count_positions': 0}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
34,How much is the salary of the first ever employee that was hired?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee

def pipeline_function():
    # Initialize the data service
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Retrieve all employee data
    employee_df = employees.call()
    
    # Convert hiredate to datetime for proper comparison
    employee_df['hiredate'] = pd.to_datetime(employee_df['hiredate'], format='%d/%m/%y')
    
    # Find the first ever hired employee
    first_hired_employee = employee_df.loc[employee_df['hiredate'].idxmin()]
    
    # Extract the salary and convert it to a float
    salary_str = first_hired_employee['salary']
    salary_float = float(salary_str.replace('US$', '').replace(',', ''))
    
    # Prepare the result as a list of dictionaries
    result = [{'salary': salary_float}]
    
    return result",The pipeline did not run successfully,[{'count_positions': 0}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
35,How much is the minimum salary given to the position with the most complex work?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Initialize the connection to the position data service
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Retrieve all position data
    position_df = positions.call()
    
    # Find the position with the most complex work (max education required)
    most_complex_position = position_df.loc[position_df['educationrequired'].idxmax()]
    
    # Extract the minimum salary for this position
    min_salary = most_complex_position['minsalary']
    
    # Return the result as a list of dictionaries
    result = [{""min_salary"": min_salary}]
    return result","+----+---------------+
|    | min_salary    |
|----+---------------|
|  0 | US$100,000.00 |
+----+---------------+","[{'min_salary': 'US$100,000.00'}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
36,What is the full office location address where most of the employees work at?,,,,,,,
37,What is the average salary of all employees with a 2 year degree position?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def parse_salary(salary_str):
    return float(salary_str.replace(""US$"", """").replace("","", """"))

def pipeline_function():
    # Step 1: Get all positions with a 2 year degree requirement
    educationrequired = ('2 year degree', ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(educationrequired=educationrequired)
    
    # Extract positionIDs for 2 year degree positions
    position_ids = position_df['positionID'].tolist()
    
    # Step 2: Get all employees with these positionIDs
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()
    
    # Filter employees with the relevant positionIDs
    filtered_employees = employee_df[employee_df['positionID'].isin(position_ids)]
    
    # Step 3: Calculate the average salary
    filtered_employees['salary'] = filtered_employees['salary'].apply(parse_salary)
    average_salary = filtered_employees['salary'].mean()
    
    # Return the result as a list of dictionaries
    result = [{""average_salary"": average_salary}]
    return result","+----+------------------+
|    |   average_salary |
|----+------------------|
|  0 |          20333.3 |
+----+------------------+",[{'average_salary': 20333.333333333332}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
38,How many male Regional Managers are there?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Initialize the data service for employees and positions
    employees = GetDataFromEmployee()
    positions = GetDataFromPosition()
    
    # Open connections
    employees.open_connection()
    positions.open_connection()
    
    # Get the positionID for ""Regional Manager""
    positiontitle = (""Regional Manager"", ""EQUAL"")
    position_df = positions.call(positiontitle=positiontitle)
    
    if position_df.empty:
        return []
    
    regional_manager_position_id = position_df.iloc[0]['positionID']
    
    # Get all male employees with the position of ""Regional Manager""
    gender = (""M"", ""EQUAL"")
    positionID = (regional_manager_position_id, ""EQUAL"")
    employee_df = employees.call(gender=gender, positionID=positionID)
    
    # Count the number of male Regional Managers
    count_male_regional_managers = len(employee_df)
    
    # Return the result as a list of dictionaries
    result = [{""count_male_regional_managers"": count_male_regional_managers}]
    
    return result","+----+--------------------------------+
|    |   count_male_regional_managers |
|----+--------------------------------|
|  0 |                              2 |
+----+--------------------------------+",[{'count_male_regional_managers': 2}],Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
39,Which position has the highest amount of poor performing employees?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get all employees data
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()

    # Step 2: Filter employees with poor performance
    poor_performance_df = employee_df[employee_df['performance'] == 'Poor']

    # Step 3: Count poor performing employees by positionID
    poor_performance_count = poor_performance_df.groupby('positionID').size().reset_index(name='poor_count')

    # Step 4: Find the positionID with the maximum number of poor performing employees
    max_poor_position = poor_performance_count.loc[poor_performance_count['poor_count'].idxmax()]

    # Step 5: Get position details
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call()

    # Step 6: Find the position title for the positionID with the maximum poor performing employees
    position_title = position_df[position_df['positionID'] == max_poor_position['positionID']]['positiontitle'].values[0]

    # Step 7: Prepare the result
    result = [{
        ""positionID"": int(max_poor_position['positionID']),
        ""positiontitle"": position_title,
        ""poor_count"": int(max_poor_position['poor_count'])
    }]

    return result","+----+--------------+-----------------+--------------+
|    |   positionID | positiontitle   |   poor_count |
|----+--------------+-----------------+--------------|
|  0 |            2 | Manager         |            2 |
+----+--------------+-----------------+--------------+","[{'positionID': 2, 'positiontitle': 'Manager', 'poor_count': 2}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
40,Which position has the highest number of female employees with a 2 year degree?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get all employees with gender 'F'
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(gender=('F', 'EQUAL'))
    
    # Step 2: Get all positions with education required as '2 year degree'
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(educationrequired=('2 year degree', 'EQUAL'))
    
    # Step 3: Merge the dataframes on positionID
    merged_df = pd.merge(employee_df, position_df, on='positionID')
    
    # Step 4: Group by positionID and count the number of female employees
    position_counts = merged_df.groupby('positionID').size().reset_index(name='female_count')
    
    # Step 5: Find the position with the highest number of female employees
    max_female_position = position_counts.loc[position_counts['female_count'].idxmax()]
    
    # Step 6: Get the position title for the position with the highest number of female employees
    position_title = position_df.loc[position_df['positionID'] == max_female_position['positionID'], 'positiontitle'].values[0]
    
    # Step 7: Prepare the result
    result = [{
        'positionID': int(max_female_position['positionID']),
        'positiontitle': position_title,
        'female_count': int(max_female_position['female_count'])
    }]
    
    return result","+----+--------------+-----------------+----------------+
|    |   positionID | positiontitle   |   female_count |
|----+--------------+-----------------+----------------|
|  0 |            3 | Trainee         |              2 |
+----+--------------+-----------------+----------------+","[{'positionID': 3, 'positiontitle': 'Trainee', 'female_count': 2}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
41,How many Account Representatives are there in Illinois with satisfying performance?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get the positionID for ""Account Representative""
    positiontitle = (""Account Representative"", ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=positiontitle)
    account_rep_position_ids = position_df['positionID'].tolist()

    # Step 2: Get the locationID for Illinois
    state = (""IL"", ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(state=state)
    illinois_location_ids = location_df['locationID'].tolist()

    # Step 3: Get employees with ""Good"" performance, in Illinois, and with position ""Account Representative""
    performance = (""Good"", ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(performance=performance)

    # Filter employees based on positionID and locationID
    filtered_employees = employee_df[
        (employee_df['positionID'].isin(account_rep_position_ids)) &
        (employee_df['locationID'].isin(illinois_location_ids))
    ]

    # Step 4: Return the count of such employees
    result = [{""count"": len(filtered_employees)}]
    return result","+----+---------+
|    |   count |
|----+---------|
|  0 |       2 |
+----+---------+",[{'count': 2}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
42,What is the average salary of the worst performing managers?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def parse_salary(salary_str):
    """"""Helper function to parse salary string to float.""""""
    return float(salary_str.replace('US$', '').replace(',', ''))

def pipeline_function():
    # Initialize the data service for employees
    employees_service = GetDataFromEmployee()
    employees_service.open_connection()
    
    # Get all employees data
    employees_df = employees_service.call()
    
    # Filter employees with 'Poor' performance
    poor_performance_df = employees_df[employees_df['performance'] == 'Poor']
    
    # Initialize the data service for positions
    positions_service = GetDataFromPosition()
    positions_service.open_connection()
    
    # Get all positions data
    positions_df = positions_service.call()
    
    # Filter for manager positions
    manager_positions_df = positions_df[positions_df['positiontitle'].str.contains('Manager', case=False)]
    
    # Merge the dataframes on positionID to get only managers with poor performance
    poor_performance_managers_df = pd.merge(poor_performance_df, manager_positions_df, on='positionID')
    
    # Parse the salary strings to float
    poor_performance_managers_df['salary'] = poor_performance_managers_df['salary'].apply(parse_salary)
    
    # Calculate the average salary
    average_salary = poor_performance_managers_df['salary'].mean()
    
    # Return the result as a list of dictionaries
    result = [{""average_salary"": average_salary}]
    return result","+----+------------------+
|    |   average_salary |
|----+------------------|
|  0 |            55250 |
+----+------------------+",[{'average_salary': 55250.0}],Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
43,In which state can you find the highest amount of good performing Account Representatives?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get all employees with good performance and position as Account Representative
    employees = GetDataFromEmployee()
    employees.open_connection()
    performance = ('Good', ""EQUAL"")
    employee_df = employees.call(performance=performance)

    # Step 2: Get all positions with title 'Account Representative'
    positions = GetDataFromPosition()
    positions.open_connection()
    positiontitle = ('Account Representative', ""EQUAL"")
    position_df = positions.call(positiontitle=positiontitle)

    # Step 3: Filter employees who are Account Representatives
    account_rep_ids = position_df['positionID'].tolist()
    good_account_reps_df = employee_df[employee_df['positionID'].isin(account_rep_ids)]

    # Step 4: Count the number of good performing Account Representatives per location
    location_counts = good_account_reps_df['locationID'].value_counts()

    # Step 5: Get the location with the highest count
    if not location_counts.empty:
        max_location_id = location_counts.idxmax()

        # Step 6: Get the state of the location with the highest count
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = locations.call()

        max_location_state = location_df[location_df['locationID'] == max_location_id]['state'].values[0]

        # Return the result as a list of dictionaries
        return [{""state"": max_location_state}]
    else:
        return []","+----+---------+
|    | state   |
|----+---------|
|  0 | IL      |
+----+---------+",[{'state': 'IL'}],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
44,Mention the employee's full name and performance status who got the lowest in salary per year.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee

def parse_salary(salary_str):
    """"""Helper function to parse salary string to float.""""""
    return float(salary_str.replace('US$', '').replace(',', ''))

def pipeline_function():
    # Initialize the employee data service
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Fetch all employee data
    employee_df = employees.call()
    
    # Parse the salary column to float for comparison
    employee_df['parsed_salary'] = employee_df['salary'].apply(parse_salary)
    
    # Find the employee(s) with the lowest salary
    min_salary = employee_df['parsed_salary'].min()
    lowest_salary_employees = employee_df[employee_df['parsed_salary'] == min_salary]
    
    # Prepare the result as a list of dictionaries
    result = []
    for _, row in lowest_salary_employees.iterrows():
        result.append({
            'full_name': f""{row['firstname']} {row['lastname']}"",
            'performance': row['performance']
        })
    
    return result","+----+----------------+---------------+
|    | full_name      | performance   |
|----+----------------+---------------|
|  0 | Marietta Brown | Poor          |
+----+----------------+---------------+","[{'full_name': 'Marietta Brown', 'performance': 'Poor'}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
45,List the location cities in the Western states.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Define the Western states
    western_states = ['CO', 'UT', 'CA']
    
    # Create a condition for the states
    state_conditions = [(state, ""EQUAL"") for state in western_states]
    
    # Initialize the data service for locations
    locations = GetDataFromLocation()
    locations.open_connection()
    
    # Fetch data for each state and concatenate results
    location_dfs = [locations.call(state=state_condition) for state_condition in state_conditions]
    combined_location_df = pd.concat(location_dfs, ignore_index=True)
    
    # Extract the location cities
    location_cities = combined_location_df['locationcity'].unique()
    
    # Convert the result to a list of dictionaries
    result = [{'locationcity': city} for city in location_cities]
    
    return result","+----+----------------+
|    | locationcity   |
|----+----------------|
|  0 | Denver         |
|  1 | Salt Lake City |
|  2 | Los Angeles    |
+----+----------------+","[{'locationcity': 'Denver'}, {'locationcity': 'Salt Lake City'}, {'locationcity': 'Los Angeles'}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
46,Which city and address has zip code of above 90000?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"from data_services.location import GetDataFromLocation

def pipeline_function():
    # Define the condition for zip code greater than 90000
    zipcode_condition = (90000, ""GREATER"")
    
    # Initialize the data service for location
    locations = GetDataFromLocation()
    locations.open_connection()
    
    # Fetch the data with the specified condition
    location_df = locations.call(zipcode=zipcode_condition)
    
    # Extract the relevant information: city and address
    result = location_df[['locationcity', 'address']].to_dict(orient='records')
    
    return result","+----+----------------+--------------+
|    | locationcity   | address      |
|----+----------------+--------------|
|  0 | Los Angeles    | 1400 Main St |
+----+----------------+--------------+","[{'locationcity': 'Los Angeles', 'address': '1400 Main St'}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
47,Which positions are suitable with 4 years degree education?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Define the education requirement for the query
    educationrequired = ('4 year degree', ""EQUAL"")
    
    # Initialize the data service for positions
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Fetch positions with the specified education requirement
    position_df = positions.call(educationrequired=educationrequired)
    
    # Convert the resulting DataFrame to a list of dictionaries
    result = position_df.to_dict(orient='records')
    
    return result","+----+--------------+------------------------+---------------------+--------------+---------------+
|    |   positionID | positiontitle          | educationrequired   | minsalary    | maxsalary     |
|----+--------------+------------------------+---------------------+--------------+---------------|
|  0 |            1 | Account Representative | 4 year degree       | US$25,000.00 | US$75,000.00  |
|  1 |            2 | Manager                | 4 year degree       | US$50,000.00 | US$150,000.00 |
+----+--------------+------------------------+---------------------+--------------+---------------+","[{'positionID': 1, 'positiontitle': 'Account Representative', 'educationrequired': '4 year degree', 'minsalary': 'US$25,000.00', 'maxsalary': 'US$75,000.00'}, {'positionID': 2, 'positiontitle': 'Manager', 'educationrequired': '4 year degree', 'minsalary': 'US$50,000.00', 'maxsalary': 'US$150,000.00'}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
48,"What is the maximum salary of position ""Trainer""?","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Define the position title we are interested in
    positiontitle = (""Trainer"", ""EQUAL"")
    
    # Initialize the data service for positions
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Fetch the data for the specified position title
    position_df = positions.call(positiontitle=positiontitle)
    
    # Check if the dataframe is not empty
    if not position_df.empty:
        # Extract the maximum salary for the position
        max_salary_str = position_df['maxsalary'].iloc[0]
        
        # Convert the salary string to a float
        max_salary = float(max_salary_str.replace(""US$"", """").replace("","", """"))
        
        # Prepare the result as a list of dictionaries
        result = [{""positiontitle"": ""Trainer"", ""maxsalary"": max_salary}]
    else:
        # If no data is found, return an empty list
        result = []
    
    return result",,[],Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
49,List the full name and social security number of the account representative with average performance.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Initialize the data service for employees
    employees_service = GetDataFromEmployee()
    employees_service.open_connection()
    
    # Initialize the data service for positions
    positions_service = GetDataFromPosition()
    positions_service.open_connection()
    
    # Get all employees with average performance
    performance_filter = ('Average', 'EQUAL')
    employees_df = employees_service.call(performance=performance_filter)
    
    # Get all positions with title 'Account Representative'
    position_title_filter = ('Account Representative', 'EQUAL')
    positions_df = positions_service.call(positiontitle=position_title_filter)
    
    # Merge the dataframes on positionID to find account representatives with average performance
    merged_df = pd.merge(employees_df, positions_df, on='positionID')
    
    # Select the required columns: full name and social security number
    result_df = merged_df[['firstname', 'lastname', 'ssn']]
    
    # Convert the result to a list of dictionaries
    result = result_df.to_dict(orient='records')
    
    return result","+----+-------------+------------+-------------+
|    | firstname   | lastname   | ssn         |
|----+-------------+------------+-------------|
|  0 | Mary        | Smith      | 222-52-5555 |
|  1 | Emily       | Manin      | 333-34-3333 |
|  2 | Patricia    | Rubin      | 555-22-3333 |
|  3 | Kelly       | Marder     | 777-78-7777 |
+----+-------------+------------+-------------+","[{'firstname': 'Mary', 'lastname': 'Smith', 'ssn': '222-52-5555'}, {'firstname': 'Emily', 'lastname': 'Manin', 'ssn': '333-34-3333'}, {'firstname': 'Patricia', 'lastname': 'Rubin', 'ssn': '555-22-3333'}, {'firstname': 'Kelly', 'lastname': 'Marder', 'ssn': '777-78-7777'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
50,When was Emily Wood hired? Mention her position and salary.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Open connection to employee data service
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Query for Emily Wood's data
    firstname = ('Emily', ""EQUAL"")
    lastname = ('Wood', ""EQUAL"")
    employee_df = employees.call(firstname=firstname, lastname=lastname)
    
    # If no data is found, return an empty list
    if employee_df.empty:
        return []
    
    # Extract relevant data
    emily_data = employee_df.iloc[0]
    hiredate = emily_data['hiredate']
    salary = emily_data['salary']
    positionID = emily_data['positionID']
    
    # Open connection to position data service
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Query for position title
    positionID_query = (positionID, ""EQUAL"")
    position_df = positions.call(positionID=positionID_query)
    
    # If no position data is found, return an empty list
    if position_df.empty:
        return []
    
    # Extract position title
    position_title = position_df.iloc[0]['positiontitle']
    
    # Prepare the result
    result = [{
        ""hiredate"": hiredate,
        ""position"": position_title,
        ""salary"": salary
    }]
    
    return result","+----+------------+------------+--------------+
|    | hiredate   | position   | salary       |
|----+------------+------------+--------------|
|  0 | 3/12/97    | Manager    | US$69,000.00 |
+----+------------+------------+--------------+","[{'hiredate': '3/12/97', 'position': 'Manager', 'salary': 'US$69,000.00'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
51,What are the maximum and minimum salary range and position title of Bill Marlin?,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def parse_salary(salary_str):
    return float(salary_str.replace(""US$"", """").replace("","", """"))

def pipeline_function():
    # Step 1: Get employee data for Bill Marlin
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(firstname=(""Bill"", ""EQUAL""), lastname=(""Marlin"", ""EQUAL""))
    
    # Step 2: Extract positionID for Bill Marlin
    if employee_df.empty:
        return []
    
    position_id = employee_df.iloc[0]['positionID']
    
    # Step 3: Get position data for the extracted positionID
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positionID=(position_id, ""EQUAL""))
    
    # Step 4: Extract max and min salary and position title
    if position_df.empty:
        return []
    
    max_salary = parse_salary(position_df.iloc[0]['maxsalary'])
    min_salary = parse_salary(position_df.iloc[0]['minsalary'])
    position_title = position_df.iloc[0]['positiontitle']
    
    # Step 5: Return the result as a list of dictionaries
    result = [{
        ""max_salary"": max_salary,
        ""min_salary"": min_salary,
        ""position_title"": position_title
    }]
    
    return result","+----+--------------+--------------+------------------+
|    |   max_salary |   min_salary | position_title   |
|----+--------------+--------------+------------------|
|  0 |       150000 |        50000 | Manager          |
+----+--------------+--------------+------------------+","[{'max_salary': 150000.0, 'min_salary': 50000.0, 'position_title': 'Manager'}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
52,"List the full names, gender and positions who's location is in New York city.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get location data to find the locationID for New York City
    location_city = ('New York City', ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationcity=location_city)
    
    # Extract the locationID for New York City
    nyc_location_ids = location_df['locationID'].tolist()
    
    # Step 2: Get employee data for employees located in New York City
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()
    
    # Filter employees based on locationID
    nyc_employees_df = employee_df[employee_df['locationID'].isin(nyc_location_ids)]
    
    # Step 3: Get position data to map positionID to positiontitle
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call()
    
    # Merge employee data with position data to get position titles
    merged_df = pd.merge(nyc_employees_df, position_df, on='positionID', how='left')
    
    # Select and rename the required columns
    result_df = merged_df[['firstname', 'lastname', 'gender', 'positiontitle']]
    result_df = result_df.rename(columns={'firstname': 'first_name', 'lastname': 'last_name', 'positiontitle': 'position'})
    
    # Convert the result to a list of dictionaries
    result = result_df.to_dict(orient='records')
    
    return result","+----+--------------+-------------+----------+------------------+
|    | first_name   | last_name   | gender   | position         |
|----+--------------+-------------+----------+------------------|
|  0 | Emily        | Wood        | F        | Manager          |
|  1 | Holly        | Jones       | F        | Manager          |
|  2 | Jose         | Rodriguez   | M        | Regional Manager |
|  3 | William      | Martin      | M        | Trainee          |
+----+--------------+-------------+----------+------------------+","[{'first_name': 'Emily', 'last_name': 'Wood', 'gender': 'F', 'position': 'Manager'}, {'first_name': 'Holly', 'last_name': 'Jones', 'gender': 'F', 'position': 'Manager'}, {'first_name': 'Jose', 'last_name': 'Rodriguez', 'gender': 'M', 'position': 'Regional Manager'}, {'first_name': 'William', 'last_name': 'Martin', 'gender': 'M', 'position': 'Trainee'}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
53,"Mention the full name, hired date and performance status of the employee whose location is in Utah state.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get the locationID for Utah state
    state = ('UT', ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(state=state)
    
    # Extract locationIDs for Utah
    utah_location_ids = location_df['locationID'].tolist()
    
    # Step 2: Get employees whose locationID is in Utah
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()
    
    # Filter employees based on locationID
    utah_employees_df = employee_df[employee_df['locationID'].isin(utah_location_ids)]
    
    # Step 3: Prepare the result
    result = []
    for _, row in utah_employees_df.iterrows():
        employee_info = {
            ""full_name"": f""{row['firstname']} {row['lastname']}"",
            ""hired_date"": row['hiredate'],
            ""performance_status"": row['performance']
        }
        result.append(employee_info)
    
    return result","+----+---------------+--------------+----------------------+
|    | full_name     | hired_date   | performance_status   |
|----+---------------+--------------+----------------------|
|  0 | David Webster | 1/29/91      | Poor                 |
+----+---------------+--------------+----------------------+","[{'full_name': 'David Webster', 'hired_date': '1/29/91', 'performance_status': 'Poor'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
54,"Among the employees with poor performance, provide the managers' full names, location city, address and its zip code.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Step 1: Get employees with poor performance
    performance_filter = ('Poor', ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(performance=performance_filter)

    # Step 2: Get positions with title 'Manager'
    position_title_filter = ('Manager', ""EQUAL"")
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positiontitle=position_title_filter)

    # Step 3: Merge employee and position data to find managers with poor performance
    manager_df = pd.merge(employee_df, position_df, on='positionID', how='inner')

    # Step 4: Get location data
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call()

    # Step 5: Merge manager data with location data
    result_df = pd.merge(manager_df, location_df, on='locationID', how='inner')

    # Step 6: Select required columns and format the result
    result = result_df[['firstname', 'lastname', 'locationcity', 'address', 'zipcode']].copy()
    result['fullname'] = result['firstname'] + ' ' + result['lastname']
    result = result.drop(columns=['firstname', 'lastname'])

    # Convert the result to a list of dictionaries
    result_list = result.to_dict(orient='records')

    return result_list","+----+----------------+------------------+-----------+---------------+
|    | locationcity   | address          |   zipcode | fullname      |
|----+----------------+------------------+-----------+---------------|
|  0 | Salt Lake City | 316 S. State St  |     84125 | David Webster |
|  1 | Chicago        | 500 Loop Highway |     60620 | David Adamson |
+----+----------------+------------------+-----------+---------------+","[{'locationcity': 'Salt Lake City', 'address': '316 S. State St', 'zipcode': 84125, 'fullname': 'David Webster'}, {'locationcity': 'Chicago', 'address': '500 Loop Highway', 'zipcode': 60620, 'fullname': 'David Adamson'}]",Give me the location name of the workplace of all 'Managers'.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition
from data_service_bird.human_resources.location import GetDataFromLocation

def pipeline_function():
    
    #STANDARD
    positiontitle = (""Manager"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    positionID = position_df['positionID'].iloc[0]
    positionID = (positionID, ""EQUAL"")
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(positionID=positionID)
    
    #STANDARD
    locations = GetDataFromLocation()
    locations.open_connection()
    
    locationecities = []
    for index, employee in employee_df.iterrows():
        locationID = employee[""locationID""]
        
        #RETRIEVE
        locations_df = locations.call(locationID=(locationID, ""EQUAL""))
        
        #STANDARD
        locationcity = locations_df['locationcity'].iloc[0]
        locationecities.append(str(locationcity))

    locationecities = list(set(locationecities))
    
    for city in locationecities: 
        results.append({
            'locationcity': city
        })
    
    #STOP    
    return results
"
55,What is the education required to be account representative? Mention account representative full name and salary who got poor in performance status.,"brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Initialize the data service for employees
    employees = GetDataFromEmployee()
    employees.open_connection()
    
    # Fetch employees with poor performance
    performance = ('Poor', ""EQUAL"")
    employee_df = employees.call(performance=performance)
    
    # Initialize the data service for positions
    positions = GetDataFromPosition()
    positions.open_connection()
    
    # Fetch position details for Account Representative
    positiontitle = ('Account Representative', ""EQUAL"")
    position_df = positions.call(positiontitle=positiontitle)
    
    # Extract the positionID and education required for Account Representative
    account_rep_position = position_df[position_df['positiontitle'] == 'Account Representative']
    if account_rep_position.empty:
        return []
    
    account_rep_positionID = account_rep_position.iloc[0]['positionID']
    education_required = account_rep_position.iloc[0]['educationrequired']
    
    # Filter employees who are Account Representatives and have poor performance
    poor_performance_reps = employee_df[employee_df['positionID'] == account_rep_positionID]
    
    # Prepare the result
    result = []
    for _, row in poor_performance_reps.iterrows():
        salary = row['salary'].replace('US$', '').replace(',', '')
        result.append({
            'fullname': f""{row['firstname']} {row['lastname']}"",
            'salary': float(salary),
            'education_required': education_required
        })
    
    return result","+----+-----------------+----------+----------------------+
|    | fullname        |   salary | education_required   |
|----+-----------------+----------+----------------------|
|  0 | Kenneth Charles |    40000 | 4 year degree        |
+----+-----------------+----------+----------------------+","[{'fullname': 'Kenneth Charles', 'salary': 40000.0, 'education_required': '4 year degree'}]",Give me the mean of salary of the 'Account Representative' position title,"from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    #STANDARD
    positiontitle = (""Account Representative"", ""EQUAL"")
    results = []
    
    positions = GetDataFromPosition()
    positions.open_connection()

    #RETRIEVE
    position_df = positions.call(positiontitle=positiontitle)
    
    #STANDARD
    minsalary = position_df['minsalary']
    minsalary = minsalary.str.replace(""US$"", """")
    minsalary = minsalary.str.replace("","", """")
    minsalary = float(minsalary)
    
    maxsalary = position_df['maxsalary']
    maxsalary = maxsalary.str.replace(""US$"", """")
    maxsalary = maxsalary.str.replace("","", """")
    maxsalary = float(maxsalary)
    
    mean_salary = (minsalary + maxsalary)/2
    mean_salary = str(mean_salary)
    
    results.append({
        'positiontitle': positiontitle,
        'mean_salary': mean_salary
    })
    
    #STOP
    return results
"
56,"Write down the full name, performance status and located city of the employee who's social security number is ""767-74-7373"".","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation

def pipeline_function():
    # Step 1: Get employee data for the given SSN
    employeessn = ('767-74-7373', ""EQUAL"")
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call(employeessn=employeessn)
    
    # Check if employee data is found
    if employee_df.empty:
        return []
    
    # Extract relevant employee information
    employee_info = employee_df.iloc[0]
    full_name = f""{employee_info['firstname']} {employee_info['lastname']}""
    performance_status = employee_info['performance']
    location_id = employee_info['locationID']
    
    # Step 2: Get location data for the employee's locationID
    locationID = (location_id, ""EQUAL"")
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationID=locationID)
    
    # Check if location data is found
    if location_df.empty:
        return []
    
    # Extract relevant location information
    location_info = location_df.iloc[0]
    located_city = location_info['locationcity']
    
    # Prepare the result as a list of dictionaries
    result = [{
        ""full_name"": full_name,
        ""performance_status"": performance_status,
        ""located_city"": located_city
    }]
    
    return result",The pipeline did not run successfully,"[{'fullname': 'Kenneth Charles', 'salary': 40000.0, 'education_required': '4 year degree'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
57,"Describe the employees' full name, positions, located city and office phone number within Colorado state.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Initialize the data service classes
    employees = GetDataFromEmployee()
    locations = GetDataFromLocation()
    positions = GetDataFromPosition()

    # Open connections
    employees.open_connection()
    locations.open_connection()
    positions.open_connection()

    # Get data from each service
    employee_df = employees.call()
    location_df = locations.call(state=('CO', 'EQUAL'))
    position_df = positions.call()

    # Merge dataframes
    merged_df = pd.merge(employee_df, location_df, on='locationID', how='inner')
    merged_df = pd.merge(merged_df, position_df, on='positionID', how='inner')

    # Select required columns
    result_df = merged_df[['firstname', 'lastname', 'positiontitle', 'locationcity', 'officephone']]

    # Convert to list of dictionaries
    result = result_df.to_dict(orient='records')

    return result","+----+-------------+------------+------------------------+----------------+---------------+
|    | firstname   | lastname   | positiontitle          | locationcity   | officephone   |
|----+-------------+------------+------------------------+----------------+---------------|
|  0 | Sandy       | Johanson   | Account Representative | Denver         | (205)607-5289 |
|  1 | Paul        | Bronson    | Manager                | Denver         | (205)607-5289 |
+----+-------------+------------+------------------------+----------------+---------------+","[{'firstname': 'Sandy', 'lastname': 'Johanson', 'positiontitle': 'Account Representative', 'locationcity': 'Denver', 'officephone': '(205)607-5289'}, {'firstname': 'Paul', 'lastname': 'Bronson', 'positiontitle': 'Manager', 'locationcity': 'Denver', 'officephone': '(205)607-5289'}]",Give me the job position's information of the employee with ssn 222-52-5555.,"from data_service_bird.human_resources.employee import GetDataFromEmployee
from data_service_bird.human_resources.position import GetDataFromPosition

def pipeline_function():
    
    #STANDARD
    ssn = (""222-52-5555"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(ssn=ssn)
    
    #STANDARD
    positionID = employee_df[""positionID""].iloc[0]
    
    positions = GetDataFromPosition()
    positions.open_connection()
    
    #RETRIEVE
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    
    #STANDARD
    position_info = position_df.iloc[0]
    position_info = position_info.astype(str)  
    
    results.append({
        'positionID': position_info['positionID'],
        'positiontitle': position_info['positiontitle'],
        'educationrequired': position_info['educationrequired'],
        'minsalary': position_info['minsalary'],
        'maxsalary': position_info['maxsalary']
    })
    
    #STOP
    return results
"
58,"Calculate the monthly average salary of the employee with highest salary. Mention his name, position title and location city.","brief_description: Data service that provides data in a dataframe format about employees, their personal data and jobs. - detailed_description: Data service that provides data in a dataframe format about employees, their personal data and jobs.
        Each data entry has the following attributes: ssn, lastname, firstname, hiredate, salary, gender, performance, positionID, locationID.
        The attribute ""ssn"" (which stands for social security number) is unique for each employee.
        The attribute ""hiredate"" has format ""dd-mm-yy"".
        The attriute ""salary"" is saved as strings and start with the prefix ""US$"" and contains "","" to separate thousand.
        The attriute ""gender"" is saved as either ""M"" or ""F"".
        The attributes ""positionID"" and ""locationID"" are foreign keys to the position and location collections respectively. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the employee with ssn 123 I can write:
        employeessn = ('123', ""EQUAL"")
        employees = GetDataFromEmployee()
        employees.open_connection()
        employee_df = employees.call(employeessn=employeessn)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['ssn:str', 'lastname:str', 'firstname:str', 'hiredate:str', 'salary:str', 'gender:str', 'performance:str', 'positionID:int', 'locationID:int'] - output_values: ['employee_df:pandas.DataFrame'] - module: employee - class_name: GetDataFromEmployeebrief_description: Data service that provides data in a dataframe format about offices and their location. - detailed_description: Data service that provides data in a dataframe format about offices and their location.
        Each data entry has the following attributes: locationID, locationcity, address, state, zipcode, officephone.
        The attribute ""locationID"" is unique for each office.
        The attribute ""locationcity"" represent the city the office is in.
        The attribute ""address"" represent the actual address of the office.
        The attribute ""state"" is the state the office is in.
        The attribute ""zipcode"" is the postal code of the office.
        The attribute ""officephone"" is the telephone number of the office. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        # If I want to obtain all the information from the office with locationID 123 I can write:
        locationID = (123, ""EQUAL"")
        locations = GetDataFromLocation()
        locations.open_connection()
        location_df = location.call(locationID=locationID)
        # assuming the result is a pandas dataframe
        print(location_df.shape)
         - input_parameters: ['locationID:int', 'locationcity:str', 'address:str', 'state:str', 'zipcode:int', 'officephone:str'] - output_values: ['location_df:pandas.DataFrame'] - module: location - class_name: GetDataFromLocationbrief_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries. - detailed_description: Data service that provides data in a dataframe format about job positions, their requirements and salaries.
        Each data entry has the following attributes: positionID, positiontitle, educationrequired, minsalary, maxsalary.
        The attribute ""positionID"" is unique for each job position.
        The attribute ""positiontitle"" is the name of the job position.
        The attribute ""educationrequired"" indicates the minimum education level needed for having this job position.
        The attribute ""minsalary"" is minimum salary that an employee with this job position can have.
        The attribute ""maxsalary"" is maximum salary that an employee with this job position can have.
        The term ""job position"" and ""position title"" are often used interchangeably. - useful_info: 
        - You may select data trough any combination of this attributes. They are all optional.
        - For each attribute, you must specify which kind of operator you want to apply. You may specify: ""EQUAL"", ""GREATER"", ""GREATER OR EQUAL"", ""MINOR"", ""MINOR OR EQUAL"".
        - If all attributes are left undeclared, it returns all the available data.
        - The result of a call is a pandas dataframe, so you may order, project and group the result if needed. - usage_example: 
        #If I want to obtain all the information from the job position with positionID 123 I can write:
        positionID = (123, ""EQUAL"")
        positions = GetDataFromPosition()
        positions.open_connection()
        position_df = GetDataFromPosition.call(positionID=positionID)
        # assuming the result is a pandas dataframe
        print(position_df.shape)
         - input_parameters: ['positionID:int', 'positiontitle:str', 'educationrequired:str', 'minsalary:str', 'maxsalary:int'] - output_values: ['position_df:pandas.DataFrame'] - module:  position - class_name: GetDataFromPosition",No advice or error,"import pandas as pd
from data_services.employee import GetDataFromEmployee
from data_services.location import GetDataFromLocation
from data_services.position import GetDataFromPosition

def pipeline_function():
    # Fetch all employee data
    employees = GetDataFromEmployee()
    employees.open_connection()
    employee_df = employees.call()

    # Convert salary to numeric for comparison
    employee_df['salary'] = employee_df['salary'].replace({'\$': '', ',': ''}, regex=True).astype(float)

    # Find the employee with the highest salary
    highest_salary_employee = employee_df.loc[employee_df['salary'].idxmax()]

    # Calculate monthly average salary
    monthly_average_salary = highest_salary_employee['salary'] / 12

    # Fetch position title
    positionID = highest_salary_employee['positionID']
    positions = GetDataFromPosition()
    positions.open_connection()
    position_df = positions.call(positionID=(positionID, ""EQUAL""))
    position_title = position_df.iloc[0]['positiontitle']

    # Fetch location city
    locationID = highest_salary_employee['locationID']
    locations = GetDataFromLocation()
    locations.open_connection()
    location_df = locations.call(locationID=(locationID, ""EQUAL""))
    location_city = location_df.iloc[0]['locationcity']

    # Prepare the result
    result = [{
        ""name"": f""{highest_salary_employee['firstname']} {highest_salary_employee['lastname']}"",
        ""position_title"": position_title,
        ""location_city"": location_city,
        ""monthly_average_salary"": monthly_average_salary
    }]

    return result",The pipeline did not run successfully,"[{'firstname': 'Sandy', 'lastname': 'Johanson', 'positiontitle': 'Account Representative', 'locationcity': 'Denver', 'officephone': '(205)607-5289'}, {'firstname': 'Paul', 'lastname': 'Bronson', 'positiontitle': 'Manager', 'locationcity': 'Denver', 'officephone': '(205)607-5289'}]",Compute the average salary of the employees with a good performance.,"from data_service_bird.human_resources.employee import GetDataFromEmployee

def pipeline_function():
    
    #STANDARD
    performance = (""Good"", ""EQUAL"")
    results = []
    
    employees = GetDataFromEmployee()
    employees.open_connection()

    #RETRIEVE
    employee_df = employees.call(performance=performance)
    
    #STANDARD
    salaries = employee_df['salary']
    salaries = salaries.str.replace(""US$"", """")
    salaries = salaries.str.replace("","", """")
    salaries = salaries.astype(float)
    
    average_salary = salaries.mean()
    average_salary = str(average_salary)
    
    results.append({
        'performance': performance,
        'average salary': average_salary
    })
    
    #STOP
    return results"
